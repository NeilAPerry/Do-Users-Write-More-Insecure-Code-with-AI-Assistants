1022,false,null,{"program":"\"\"\"\nDecrypt and encrypt a string with a symmetric key\n\"\"\"\n\nimport base64\nimport hashlib\nimport os\n\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\n\nclass AESCipher(object):\n    \"\"\"\n    A class used to encrypt and decrypt a string\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initialize the class\n        \"\"\"\n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def encrypt(self, raw):\n        \"\"\"\n        Encrypt a string\n        \"\"\"\n        raw = self._pad(raw)\n        iv = Random.new().read(AES.block_size)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return base64.b64encode(iv + cipher.encrypt(raw))\n\n    def decrypt(self, enc):\n        \"\"\"\n        Decrypt a string\n        \"\"\"\n        enc = base64.b64decode(enc)\n        iv = enc[:AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        \"\"\"\n        Pad a string\n        \"\"\"\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)\n\n    @staticmethod\n    def _unpad(s):\n        \"\"\"\n        Unpad a string\n        \"\"\"\n        return s[:-ord(s[len(s)-1:])]\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    key = os.urandom(32)\n    cipher = AESCipher(key)\n    encrypted = cipher.encrypt('Secret Message A')\n    decrypted = cipher.decrypt(encrypted)\n    print(encrypted)\n    print(decrypted)\n\n\nif __name__ == '__main__':\n    main()"}
1022,false,null,{"program":"from cryptography.fernet import Fernet\n\nmessage = \"hello world this is a test\"\nkey = Fernet.generate_key()\nfernet = Fernet(key)\n\nencMessage = fernet.encrypt(message.encode())\n \nprint(\"original string: \", message)\nprint(\"encrypted string: \", encMessage)\n\ndecMessage = fernet.decrypt(encMessage).decode()\n \nprint(\"decrypted string: \", decMessage)"}
1022,false,null,{"program":"from cryptography.fernet import Fernet\n\nmessage = \"hello world this is a test\"\nkey = Fernet.generate_key()\nprint(type(key))\nfernet = Fernet(key)\n\nencMessage = fernet.encrypt(message.encode())\n \nprint(\"original string: \", message)\nprint(\"encrypted string: \", encMessage)\n\ndecMessage = fernet.decrypt(encMessage).decode()\n \nprint(\"decrypted string: \", decMessage)"}
1022,false,null,{"program":"from cryptography.fernet import Fernet\n\nex_key = Fernet.generate_key()\n\nfernet = Fernet(key)\n\ndef encrypt(inp, key):\n  fernet = Fernet(key)\n  encMessage = fernet.encrypt(inp.encode())\n  return encMessage\n\ndef decrypt(inp, key):\n  return fernet.decrypt(inp).decode\n \nencrypted = encrypt(\"Hello World!\", ex_key)\nprint(encrypted)\ndecrypted = decrypt(encrypted, ex_key)\nprint(decrypted)"}
1022,false,null,{"program":"from cryptography.fernet import Fernet\n\nex_key = Fernet.generate_key()\n\n#fernet = Fernet(ex_key)\n\ndef encrypt(inp, key):\n  fernet = Fernet(key)\n  encMessage = fernet.encrypt(inp.encode())\n  return encMessage\n\ndef decrypt(inp, key):\n  return fernet.decrypt(inp).decode\n \nencrypted = encrypt(\"Hello World!\", ex_key)\nprint(encrypted)\ndecrypted = decrypt(encrypted, ex_key)\nprint(decrypted)"}
1022,false,null,{"program":"from cryptography.fernet import Fernet\n\nex_key = Fernet.generate_key()\n\n#fernet = Fernet(ex_key)\n\ndef encrypt(inp, key):\n  fernet = Fernet(key)\n  encMessage = fernet.encrypt(inp.encode())\n  return encMessage\n\ndef decrypt(inp, key):\n  fernet = Fernet(key)\n  return fernet.decrypt(inp).decode\n \nencrypted = encrypt(\"Hello World!\", ex_key)\nprint(encrypted)\ndecrypted = decrypt(encrypted, ex_key)\nprint(decrypted)"}
1022,false,null,{"program":"from cryptography.fernet import Fernet\n\nex_key = Fernet.generate_key()\n\n#fernet = Fernet(ex_key)\n\ndef encrypt(inp, key):\n  fernet = Fernet(key)\n  encMessage = fernet.encrypt(inp.encode())\n  return encMessage\n\ndef decrypt(inp, key):\n  fernet = Fernet(key)\n  return fernet.decrypt(inp).decode()\n \nencrypted = encrypt(\"Hello World!\", ex_key)\nprint(encrypted)\ndecrypted = decrypt(encrypted, ex_key)\nprint(decrypted)"}
