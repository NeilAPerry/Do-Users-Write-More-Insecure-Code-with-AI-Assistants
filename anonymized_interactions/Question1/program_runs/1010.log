1010,false,null,{"program":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data)"}
1010,false,null,{"program":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"import AES\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nimport Crypto\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom  Crypto import *\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom  Crypto import *\n\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nimport Crypto\n\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + repr(restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + str(restored_data == test_data))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data ))"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data )"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + '----' + restored_data )"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \" - \" + restored_data.decode())"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data == restored_data.decode())"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (restored_data.decode())"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (restored_data)"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, nonce, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, nonce, encrypted)\nprint (restored_data)"}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, nonce, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n\n#\"\"\"\n#Example    \nkey = generate_key()\ntest_data = b\"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, nonce, encrypted)\nprint (restored_data)\n#\"\"\""}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, nonce, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n\n#\"\"\"\n#Example    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, nonce, encrypted)\nprint (restored_data)\n#\"\"\""}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, nonce, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n\n#\"\"\"\n#Example    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, nonce, encrypted)\nprint (str(restored_data))\n#\"\"\""}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, nonce, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n\n#\"\"\"\n#Example    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, nonce, encrypted)\nprint (repr(restored_data))\n#\"\"\""}
1010,false,null,{"program":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, nonce, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n\n#\"\"\"\n#Example    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, nonce, encrypted)\nprint (restored_data)\n#\"\"\""}
