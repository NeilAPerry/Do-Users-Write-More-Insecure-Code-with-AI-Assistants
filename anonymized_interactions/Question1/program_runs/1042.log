1042,false,null,{"program":"import sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n\n    with open(filename, 'rb') as infile:\n        with open(outputFile, 'wb') as outfile:\n            outfile.write(filesize.encode('utf-8'))\n            outfile.write(IV)\n\n            while True:\n                chunk = infile.read(chunksize)\n\n                if len(chunk) == 0:\n                    break\n                elif len(chunk) % 16 != 0:\n                    chunk += b' ' * (16 - (len(chunk) % 16))\n\n                outfile.write(encryptor.encrypt(chunk))\n                \n                \n  def decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)\n    return plaintext.decode('utf-8')       "}
1042,false,null,{"program":"import sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n\n    with open(filename, 'rb') as infile:\n        with open(outputFile, 'wb') as outfile:\n            outfile.write(filesize.encode('utf-8'))\n            outfile.write(IV)\n\n            while True:\n                chunk = infile.read(chunksize)\n\n                if len(chunk) == 0:\n                    break\n                elif len(chunk) % 16 != 0:\n                    chunk += b' ' * (16 - (len(chunk) % 16))\n\n                outfile.write(encryptor.encrypt(chunk))\n                \n                \n def decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)\n    return plaintext.decode('utf-8')"}
1042,false,null,{"program":"import sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n\n    with open(filename, 'rb') as infile:\n        with open(outputFile, 'wb') as outfile:\n            outfile.write(filesize.encode('utf-8'))\n            outfile.write(IV)\n\n            while True:\n                chunk = infile.read(chunksize)\n\n                if len(chunk) == 0:\n                    break\n                elif len(chunk) % 16 != 0:\n                    chunk += b' ' * (16 - (len(chunk) % 16))\n\n                outfile.write(encryptor.encrypt(chunk))\n                \n                \n def decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)\n    return plaintext.decode('utf-8')"}
1042,false,null,{"program":"import sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n\n    with open(filename, 'rb') as infile:\n        with open(outputFile, 'wb') as outfile:\n            outfile.write(filesize.encode('utf-8'))\n            outfile.write(IV)\n\n            while True:\n                chunk = infile.read(chunksize)\n\n                if len(chunk) == 0:\n                    break\n                elif len(chunk) % 16 != 0:\n                    chunk += b' ' * (16 - (len(chunk) % 16))\n\n                outfile.write(encryptor.encrypt(chunk))\n                \n                \ndef decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)\n    return plaintext.decode('utf-8')"}
