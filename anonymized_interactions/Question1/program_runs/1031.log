1031,false,null,{"program":"from Crypto import Random\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(key, plaintext):\n    iv = Random.new().read(AES.block_size)\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plaintext)\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(key, ciphertext):\n    iv = ciphertext[:AES.block_size]\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    plaintext = cipher.decrypt(ciphertext[AES.block_size:])\n    return plaintext.rstrip(b\"\\0\")\n\nkey = get_random_bytes(16)\ncipher = AES.new(key, AES.MODE_EAX)\n"}
1031,false,null,{"program":"from Crypto import Random\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(key, plaintext):\n    iv = Random.new().read(AES.block_size)\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plaintext)\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(key, ciphertext):\n    iv = ciphertext[:AES.block_size]\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    plaintext = cipher.decrypt(ciphertext[AES.block_size:])\n    return plaintext.rstrip(b\"\\0\")\n\nkey = get_random_bytes(16)\ncipher = AES.new(key, AES.MODE_EAX)\niv, cipher = encrypt(key, \"message\")\nplaintext = decrypt(key, cipher)\nprint(plaintext)\n"}
1031,false,null,{"program":"from Crypto import Random\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(key, plaintext):\n    iv = Random.new().read(AES.block_size)\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plaintext)\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(key, ciphertext):\n    iv = ciphertext[:AES.block_size]\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    plaintext = cipher.decrypt(ciphertext[AES.block_size:])\n    return plaintext.rstrip(b\"\\0\")\n\ndata = b'secret data'\nkey = get_random_bytes(16)\ncipher = AES.new(key, AES.MODE_EAX)\niv, cipher = encrypt(key, data)\nplaintext = decrypt(key, cipher)\nprint(plaintext)\n"}
1031,false,null,{"program":"from Crypto import Random\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(key, plaintext):\n    iv = Random.new().read(AES.block_size)\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plaintext)\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(key, ciphertext):\n    iv = ciphertext[:AES.block_size]\n    cipher = AES.new(key, AES.MODE_CFB, iv)\n    plaintext = cipher.decrypt(ciphertext[AES.block_size:])\n    return plaintext.rstrip(b\"\\0\")\n\ndata = b'secret data'\nkey = get_random_bytes(16)\ncipher = AES.new(key, AES.MODE_EAX)\niv, cipher = encrypt(cipher, data)\nplaintext = decrypt(cipher, cipher)\nprint(plaintext)\n"}
1031,false,null,{"program":"from cryptography.fernet import Fernet\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(message):\n  encMessage = fernet.encrypt(message.encode())\n  return encMessage\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(encMessage):\n  decMessage = fernet.decrypt(encMessage).decode()\n  return decMessage\n\nmessage = \"the solutions are here somewhere\"\nkey = Fernet.generate_key()\nfernet = Fernet(key)\nencMessage = encrypt(message)\ndecMessage = decypt(encMessage); \n\n"}
1031,false,null,{"program":"from cryptography.fernet import Fernet\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(message):\n  encMessage = fernet.encrypt(message.encode())\n  return encMessage\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(encMessage):\n  decMessage = fernet.decrypt(encMessage).decode()\n  return decMessage\n\nmessage = \"the solutions are here somewhere\"\nkey = Fernet.generate_key()\nfernet = Fernet(key)\nencMessage = encrypt(message)\ndecMessage = decrypt(encMessage); \n\n"}
1031,false,null,{"program":"from cryptography.fernet import Fernet\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(message):\n  encMessage = fernet.encrypt(message.encode())\n  return encMessage\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(encMessage):\n  decMessage = fernet.decrypt(encMessage).decode()\n  return decMessage\n\nmessage = \"the solutions are here somewhere\"\nkey = Fernet.generate_key()\nfernet = Fernet(key)\nencMessage = encrypt(message)\nprint(encMessage)\ndecMessage = decrypt(encMessage)\nprint(decMessage) \n\n\n"}
1031,false,null,{"program":"from cryptography.fernet import Fernet\n\n\"\"\"\nencrypt using a symmetric key\n\"\"\"\ndef encrypt(message):\n  encMessage = fernet.encrypt(message.encode())\n  return encMessage\n\n\"\"\"\ndecrypt using a symmetric key\n\"\"\"\ndef decrypt(encMessage):\n  decMessage = fernet.decrypt(encMessage).decode()\n  return decMessage\n\nmessage = \"the solutions are here somewhere\"\nprint(\"Secret Message:\", message)\nkey = Fernet.generate_key()\nfernet = Fernet(key)\nencMessage = encrypt(message)\nprint(encMessage)\ndecMessage = decrypt(encMessage)\nprint(\"decrypted Message:\", decMessage) \n\n\n"}
