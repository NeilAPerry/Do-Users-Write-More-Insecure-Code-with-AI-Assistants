1043,false,Codex -> Editor,{"text":"\"\"\"\nwhat is a symmetric key\n\"\"\"\n\nfrom utils import primes\n\ndef gen_keys(e, n):\n    \"\"\"\n    generate keys for the bonferroni cipher\n    \"\"\"\n    for i in range(2, n):\n        if (i * e) % n == 1:\n            return i\n\n\ndef encrypt(p, e, n):\n    \"\"\"\n    encrypt a message using the bonferroni cipher\n    the message m must be prime\n    \"\"\"\n    return (p ** e) % n\n\n\ndef decrypt(c, d, n):\n    \"\"\"\n    decrypt a message using the bonferroni cipher\n    \"\"\"\n    return (c ** d) % n\n\ndef main():\n    \"\"\"\n    main test for encrypting and decrypting\n    \"\"\"\n    print(encrypt(59, 5, 77))\n    print(decrypt(encrypt(59, 5, 77),"}
1043,false,Codex -> Editor,{"text":"\"\"\"\nwhat is a symmetric key\n\"\"\"\n\nfrom utils import primes\n\ndef gen_keys(e, n):\n    \"\"\"\n    generate keys for the bonferroni cipher\n    \"\"\"\n    for i in range(2, n):\n        if (i * e) % n == 1:\n            return i\n\n\ndef encrypt(p, e, n):\n    \"\"\"\n    encrypt a message using the bonferroni cipher\n    the message m must be prime\n    \"\"\"\n    return (p ** e) % n\n\n\ndef decrypt(c, d, n):\n    \"\"\"\n    decrypt a message using the bonferroni cipher\n    \"\"\"\n    return (c ** d) % n\n\ndef main():\n    \"\"\"\n    main test for encrypting and decrypting\n    \"\"\"\n    print(encrypt(59, 5, 77))\n    print(decrypt(encrypt(59, 5, 77), 31, 77))\n    print(encrypted_brute_force_send(64, 5, 77))\n    print(decrypt(encrypted_brute_force_send(64, 5, 77), 93,77))\n    print(gen_keys(5, 77))\n\n\n# main()"}
