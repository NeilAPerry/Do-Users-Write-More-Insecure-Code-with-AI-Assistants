1010,false,Editor -> Codex,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encryption(data, key):\n"}
1010,false,Editor -> Codex,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(data, key):\n"}
1010,false,Codex -> Editor,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(data, key):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string"}
1010,false,Editor -> Codex,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(data, key):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(ciphertext, key):\n"}
1010,false,Editor -> Codex,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(data, key):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(ciphertext, key):\n"}
1010,false,Codex -> Editor,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(data, key):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(ciphertext, key):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #"}
1010,false,Editor -> Codex,{"text":"\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,Codex -> Editor,{"text":"import AES\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + \"-\" + restored_data + \"=\" + (restored_data == test_data))"}
1010,false,Editor -> Codex,{"text":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data + '----' + restored_data )"}
1010,false,Codex -> Editor,{"text":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data == restored_data.decode())"}
1010,false,Codex -> Editor,{"text":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (test_data == restored_data.decode())"}
1010,false,Editor -> Codex,{"text":"\"\"\"\nImport cryptographic library\n\"\"\"\nfrom Crypto.Cipher import AES\nimport os\n\n\"\"\"\nFunction to encrypt a string using a symmetric key\n\"\"\"\ndef encrypt(key, data):\n    # Convert the data to bytes\n    data = data.encode()\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Encrypt the data\n    ciphertext, tag = cipher.encrypt_and_digest(data)\n    # Return the ciphertext and the nonce\n    return ciphertext, cipher.nonce\n\n\"\"\"\nFunction to decrypt a string\n\"\"\"\ndef decrypt(key, ciphertext):\n    # Create a cipher object using the key\n    cipher = AES.new(key, AES.MODE_EAX)\n    # Decrypt the data\n    data = cipher.decrypt(ciphertext)\n    # Return the decrypted data\n    return data\n\n\"\"\"\nFunction to generate a symmetric key\n\"\"\"\ndef generate_key():\n    # Generate a random key\n    key = os.urandom(16)\n    #\n    return key\n    \nkey = generate_key()\ntest_data = \"Jim's test\"\nencrypted, nonce = encrypt(key, test_data)\nrestored_data = decrypt(key, encrypted)\nprint (restored_data)"}
