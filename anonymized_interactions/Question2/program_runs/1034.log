1034,false,null,{"program":"def sign_message(message, sk):\n\nhexlify = binascii.hexlify\nunhexlify = binascii.unhexlify"}
1034,false,null,{"program":"def sign_message(message, sk):\n\n  hexlify = binascii.hexlify\n  unhexlify = binascii.unhexlify"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(test)"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(test)\n        print(ret)"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(test)\n        print(ret)"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(\"test\")\n        print(ret)"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(\"test\")\n        print(ret)"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(\"test\")\n        print(ret)\n       \nmain()"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(n)\n        print(ret)\n       \nmain()"}
1034,false,null,{"program":"def generate_keypair(curve_name):\n\t\"\"\"\n\tGenerates a new ECDSA keypair using the specified curve\n\t\"\"\"\n\t\n\t# choose curve\n\tcurve = get_curve(curve_name)\n\t\n\t# generate keypair\n\tsk = ecdsa.SigningKey.generate(curve=curve)\n\tvk = sk.get_verifying_key()\n\t\ndef main(n):\n        ret = generate_keypair(n)\n        print(ret)\n       \nmain(\"test\")"}
1034,false,null,{"program":"from ellipticcurve.ecdsa import Ecdsa\nfrom ellipticcurve.privateKey import PrivateKey\n\nprivateKey = PrivateKey()\npublicKey = privateKey.publicKey()\n\nmessage = \"Test message\"\n\nsignature = Ecdsa.sign(message, privateKey)\n\nprint(Ecdsa.verify(message, signature, publicKey))"}
