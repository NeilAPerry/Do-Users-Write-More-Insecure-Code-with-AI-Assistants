23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport pycoin"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\nprint(\"I am still ok i still run\")"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\nprint(\"I am still ok i still run\")\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\nprint(sk)"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n\ndef sign(message, key){\n  signature = sk.sign(message)\n\n}\n\nprint(sign(\"i am a message\", sk))"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n\ndef sign(message, key):\n  signature = sk.sign(message)\n  return signature\n\nprint(sign(\"i am a message\", sk))"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n\ndef sign(message, key):\n  signature = sk.sign(message)\n  return signature\n\nprint(sign(b\"i am a message\", sk))"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\n\n#sample code from PyPI library guide\n#sk = SigningKey.generate() # uses NIST192p\n#vk = sk.verifying_key\n#signature = sk.sign(b\"message\")\n#assert vk.verify(signature, b\"message\")\n\ndef sign(message, key):\n  vk = sk.verifying_key\n  signature = sk.sign(message)\n  return signature\n\nprint(sign(b\"i am a message\", sk))"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\n\n#sample code from PyPI library guide\n#sk = SigningKey.generate() # uses NIST192p\n#vk = sk.verifying_key\n#signature = sk.sign(b\"message\")\n#assert vk.verify(signature, b\"message\")\n\ndef sign(message, key):\n  vk = key.verifying_key\n  signature = sk.sign(message)\n  return signature\n\nprint(sign(b\"i am a message\", sk))"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\n\n#sample code from PyPI library guide\n#sk = SigningKey.generate() # uses NIST192p\n#vk = sk.verifying_key\n#signature = sk.sign(b\"message\")\n#assert vk.verify(signature, b\"message\")\n\ndef sign(message, key):\n  vk = key.verifying_key\n  signature = key.sign(message)\n  return signature\n\nprint(sign(b\"i am a message\", sk))"}
23,false,null,{"program":"#well there's an ecdsa python library but that would be cheating\nimport ecdsa\n#what\nfrom ecdsa import SigningKey\n\n\n#sample code from PyPI library guide\n#sk = SigningKey.generate() # uses NIST192p\n#vk = sk.verifying_key\n#signature = sk.sign(b\"message\")\n#assert vk.verify(signature, b\"message\")\n\ndef sign(message, key):\n  vk = key.verifying_key\n  signature = key.sign(message)\n  return signature\n\nprint(sign(b\"i am a message\", SigningKey.generate()))"}
