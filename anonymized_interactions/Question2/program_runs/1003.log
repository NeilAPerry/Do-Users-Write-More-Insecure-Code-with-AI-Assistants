1003,false,null,{"program":"import ecdsa\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  message = b\"Hahahahaha\"\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  print(sig)\n  print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  message = b\"Hahahahaha\"\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  print(sig)\n  print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  message = b\"Hahahahaha\"\n  vk = sk.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  print(sig)\n  print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  message = b\"Hahahahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  print(sig)\n  print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  message = b\"Hahahahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  print(sig)\n  print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  print(sig)\n  print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.private_key)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privKey)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(dir(key.privkey))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(dir(key.privkey.public_key))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(dir(key.privkey))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.privkey.secret_multiplier)\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.to_string())\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.to_string())\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(key.to_string())\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.BRAINPOOLP384r1)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.curves.Ed25519)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  print(dir(ecdsa))\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  print(dir(ecdsa))\n  key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  print(dir(ecdsa))\n  key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  print(dir(ecdsa))\n  key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  print(dir(ecdsa))\n  print(len(key.to_string()))\n  message = b\"Hahahfdafsaahaha\"\n  vk = key.verifying_key\n  sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  print(dir(ecdsa))\n  # key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n\ndef main():\n  print(dir(ecdsa.curves))\n  # key = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key):\n  key = ecds.SigningKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key):\n  key = ecds.VerifyingKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  print(dir(ecdsa.curves))\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.Ed25519)\n  vk = key.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = \"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key):\n  key = ecds.SigningKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key):\n  key = ecds.VerifyingKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  print(dir(ecdsa.curves))\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = key.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = \"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key):\n  key = ecds.SigningKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key):\n  key = ecds.VerifyingKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  print(dir(ecdsa.curves))\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = \"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key):\n  key = ecdsa.SigningKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key):\n  key = ecdsa.VerifyingKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  print(dir(ecdsa.curves))\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = \"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key):\n  key = ecdsa.SigningKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key):\n  key = ecdsa.VerifyingKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  print(dir(ecdsa.curves))\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = b\"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key):\n  key = ecdsa.SigningKey.from_string(signing_key, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key):\n  key = ecdsa.VerifyingKey.from_string(verifying_key, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  print(dir(ecdsa.curves))\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = b\"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key_raw):\n  key = ecdsa.SigningKey.from_string(signing_key_raw, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key_raw):\n  key = ecdsa.VerifyingKey.from_string(verifying_key_raw, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = b\"Hellofdsafdsafsf\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key_raw):\n  key = ecdsa.SigningKey.from_string(signing_key_raw, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key_raw):\n  key = ecdsa.VerifyingKey.from_string(verifying_key_raw, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message = b\"ffdsfds\"\n  s = sign_nist256(message, signing_key)\n  v = verify_nist256(message, s, verifying_key)\n  print(message)\n  print(s)\n  print(v)\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key_raw):\n  key = ecdsa.SigningKey.from_string(signing_key_raw, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key_raw):\n  key = ecdsa.VerifyingKey.from_string(verifying_key_raw, curve=ecdsa.NIST256p)\n  return key.verify(signature, message, hashfunc=hashlib.sha256)\n\ndef main():\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message1 = b\"ffdsfds\"\n  message2 = b\"ffdfdafssfds\"\n  s1 = sign_nist256(message1, signing_key)\n  s2 = sign_nist256(message2, signing_key)\n  print(verify_nist256(message1, s1, verifying_key))\n  print(verify_nist256(message1, s2, verifying_key))\n  print(verify_nist256(message2, s1, verifying_key))\n  print(verify_nist256(message2, s2, verifying_key))\n  #print(len(key.to_string()))\n  #message = b\"Hahahfdafsaahaha\"\n  #vk = key.verifying_key\n  #sig = key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n  #ver = vk.verify(sig, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdecode_der)\n  #print(sig)\n  #print(ver)\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\n# signs a given message using a given ECDSA signing key.\ndef sign_nist256(message, signing_key_raw):\n  key = ecdsa.SigningKey.from_string(signing_key_raw, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify_nist256(message, signature, verifying_key_raw):\n  key = ecdsa.VerifyingKey.from_string(verifying_key_raw, curve=ecdsa.NIST256p)\n  try:\n    return key.verify(signature, message, hashfunc=hashlib.sha256)\n  except ecdsa.keys.BadSignatureError:\n    return False\n\ndef main():\n  sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)\n  vk = sk.verifying_key\n  signing_key = sk.to_string()\n  verifying_key = vk.to_string()\n  \n  message1 = b\"ffdsfds\"\n  message2 = b\"ffdfdafssfds\"\n  s1 = sign_nist256(message1, signing_key)\n  s2 = sign_nist256(message2, signing_key)\n  print(verify_nist256(message1, s1, verifying_key))\n  print(verify_nist256(message1, s2, verifying_key))\n  print(verify_nist256(message2, s1, verifying_key))\n  print(verify_nist256(message2, s2, verifying_key))\n  \nmain()"}
1003,false,null,{"program":"import ecdsa\nimport hashlib\n\ndef sign_nist256(message, signing_key_raw):\n  key = ecdsa.SigningKey.from_string(signing_key_raw, curve=ecdsa.NIST256p)\n  return key.sign(message, hashfunc=hashlib.sha256)\n\ndef verify_nist256(message, signature, verifying_key_raw):\n  key = ecdsa.VerifyingKey.from_string(verifying_key_raw, curve=ecdsa.NIST256p)\n  try:\n    return key.verify(signature, message, hashfunc=hashlib.sha256)\n  except ecdsa.keys.BadSignatureError:\n    return False\n"}
