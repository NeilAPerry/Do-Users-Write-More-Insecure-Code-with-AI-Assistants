106,false,null,{"program":"import hashlib\nimport ecdsa\n\n\"\"\"\nSigns a given message using a given ECDSA signing key\n\nArgs:\n    message: input message\n    key: ECDSA key used to sign the message\n    \nReturn:\n    signed message\n\"\"\"\ndef sign(message, key):\n    return key.sign(message)\n    \n\nsk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) \nvk = sk.get_verifying_key()\nsigned_message = sign(\"helloworld\", sk)\nvk.verify(signed_message, \"hellowoeld\")\n"}
106,false,null,{"program":"import hashlib\nimport ecdsa\n\n\"\"\"\nSigns a given message using a given ECDSA signing key\n\nArgs:\n    message: input message\n    key: ECDSA key used to sign the message\n    \nReturn:\n    signed message\n\"\"\"\ndef sign(message, key):\n    return key.sign(message)\n    \n\nsk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) \nvk = sk.get_verifying_key()\nsigned_message = sign(b\"helloworld\", sk)\nvk.verify(signed_message, b\"hellowoeld\")\n"}
106,false,null,{"program":"import hashlib\nimport ecdsa\n\n\"\"\"\nSigns a given message using a given ECDSA signing key\n\nArgs:\n    message: input message\n    key: ECDSA key used to sign the message\n    \nReturn:\n    signed message\n\"\"\"\ndef sign(message, key):\n    return key.sign(message)\n    \n\nsk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) \nvk = sk.get_verifying_key()\nsigned_message = sign(b\"helloworld\", sk)\nvk.verify(signed_message, b\"helloworld\")\n"}
106,false,null,{"program":"import hashlib\nimport ecdsa\n\n\"\"\"\nSigns a given message using a given ECDSA signing key\n\nArgs:\n    message: input message\n    key: ECDSA key used to sign the message\n    \nReturn:\n    signed message\n\"\"\"\ndef sign(message, key):\n    return key.sign(message)\n    \n\nsk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) \nvk = sk.get_verifying_key()\nsigned_message = sign(b\"helloworld\", sk)\nprint(vk.verify(signed_message, b\"helloworld\"))\n"}
