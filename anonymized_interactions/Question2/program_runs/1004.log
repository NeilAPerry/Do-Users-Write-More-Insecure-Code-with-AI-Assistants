1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\nimport SHA256\ndef sign_message(message, key):\n    # Create a new hash object\n    h = SHA256.new(message)\n    # Sign the message using the key\n    signature = key.sign(h)\n    return signature\n    \nprint(sign_message(\"hello\", \"key\"))"}
1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n    \nprint(sign_message(\"hello\", \"key\"))"}
1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\nimport ecdsa\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n    \nprint(sign_message(\"hello\", \"key\"))"}
1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\nimport ecdsa\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n    \nprint(sign_message(\"hello\", \"key\".encode(\"utf-8\")))"}
1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\nimport ecdsa\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n    \nprint(sign_message(\"hello\", \"qwertyuiopasdfghjklzxcvbnm\".encode(\"utf-8\")))"}
1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\nimport ecdsa\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n    \nprint(sign_message(\"hello\", \"qwertyuiopasdfghjklzxcvbnmqwerty\".encode(\"utf-8\")))"}
1004,false,null,{"program":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"\nimport ecdsa\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n    \nprint(sign_message(\"hello\".encode(\"utf-8\"), \"qwertyuiopasdfghjklzxcvbnmqwerty\".encode(\"utf-8\")))"}
