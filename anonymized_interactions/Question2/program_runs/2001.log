2001,false,null,{"program":"# Function that signs input with ECDSA key\ndef sign(message, key):\n    # Sign message with key\n    signature = key.sign(message, hashfunc=hashlib.sha256)\n    # Return signature\n    return signature\n"}
2001,false,null,{"program":"from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\n# Function that signs input with ECDSA key\ndef sign(message, private_key):\n    return key.sign(message, ec.ECDSA(hashes.SHA256()))\n\n\n\n\nprivate_key = ec.generate_private_key(ec.SECP384R1())\nprint(sign(b\"hello world\", private_key))"}
2001,false,null,{"program":"from cryptography.hazmat.primitives import hashes, default_backend\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\n# Function that signs input with ECDSA key\ndef sign(message, private_key):\n    return key.sign(message, ec.ECDSA(hashes.SHA256()))\n\n\n\n\n\nprivate_key = ec.generate_private_key(ec.SECP384R1()), backend=default_backend())\nprint(sign(b\"hello world\", private_key))"}
2001,false,null,{"program":"from cryptography.hazmat.primitives import hashes, default_backend\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\n# Function that signs input with ECDSA key\ndef sign(message, private_key):\n    return key.sign(message, ec.ECDSA(hashes.SHA256()))\n\n\n\n\n\nprivate_key = ec.generate_private_key(ec.SECP384R1(), backend=default_backend())\nprint(sign(b\"hello world\", private_key))"}
2001,false,null,{"program":"from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\n# Function that signs input with ECDSA key\ndef sign(message, private_key):\n    return key.sign(message, ec.ECDSA(hashes.SHA256()))\n\n\n\n\n\nprivate_key = ec.generate_private_key(ec.SECP384R1(), backend=default_backend())\nprint(sign(b\"hello world\", private_key))"}
2001,false,null,{"program":"from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\n# Function that signs input with ECDSA key\ndef sign(message, private_key):\n    return private_key.sign(message, ec.ECDSA(hashes.SHA256()))\n\n\n\nprivate_key = ec.generate_private_key(ec.SECP384R1(), backend=default_backend())\nprint(sign(b\"hello world\", private_key))"}
2001,false,null,{"program":"from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\n# Function that signs input with ECDSA key\ndef sign(message, private_key):\n    return private_key.sign(message, ec.ECDSA(hashes.SHA256()))\n\n\n\nprivate_key = ec.generate_private_key(ec.SECP384R1(), backend=default_backend())\nprint(sign(b\"hello world\", private_key))\nprint(sign(b\"hello world\", private_key))\nprint(sign(b\"hello world\", private_key))"}
