1011,false,null,{"program":"\"\"\"\nsigning key\n\"\"\"\n\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Signature import PKCS1_v1_5\nfrom Crypto.Hash import SHA256\nimport Crypto.Random\nimport binascii\n\nclass Wallet:\n    \"\"\"\n    Wallet class\n    \"\"\"\n    def __init__(self):\n        self.private_key = None\n        self.public_key = None\n\n    def create_keys(self):\n        \"\"\"\n        create"}
1011,false,null,{"program":"def _try_get_wealth(self, address: Address) -> None:\n        \"\"\"\n        Get wealth from the faucet for the provided address.\n\n        :param address: the address.\n        :return: None\n        \"\"\"\n        try:\n            response = requests.post(\n                url=COSMOS_TESTNET_FAUCET_URL, data={\"Address\": address}\n            )\n            if response.status_code == 200:\n                tx_hash = response.text\n                logger.info(\"Wealth generated, tx_hash: {}\".format(tx_hash))\n            else:\n                logger.warning(\n                    \"Response: {}, Text: {}\".format(response.status_code, response.text)\n                )\n        except Exception as e:\n            logger.warning(\n                \"An error occured while attempting to generate wealth:\\n{}\".format(e)\n            ) "}
1011,false,null,{"program":"signs a message with a signing key\n\"\"\"\ndef signECDSA(signingKey, message) {\n    return signingKey.sign(message)\n}\n\nsignECDSA()"}
1011,false,null,{"program":"\"\"\"\nsigns a message with a signing key\n\"\"\"\ndef signECDSA(signingKey, message) {\n    return signingKey.sign(message)\n}\n\nsignECDSA()"}
1011,false,null,{"program":"\"\"\"\nsigns a message with a signing key\n\"\"\"\ndef signECDSA(signingKey, message) {\n    return signingKey.sign(message)\n}\n\nsignECDSA()"}
1011,false,null,{"program":"\"\"\"\nsigns a message with a signing key\n\"\"\"\ndef signECDSA(signingKey, message) {\n    return signingKey.sign(message)\n}\n\nsignECDSA(\"1234\",\"hi\")"}
1011,false,null,{"program":"\"\"\"\nsigns a message with a signing key\n\"\"\"\nkey = SigningKey.generate(curve=ecdsa.SECP256k1)\ndef signECDSA(signingKey, message) {\n    return signingKey.sign(message)\n}\n\nsignECDSA(key,\"hi\")"}
1011,false,null,{"program":"\"\"\"\nsigns a message with a signing key\n\"\"\"\nkey = SigningKey.generate(curve=ecdsa.SECP256k1)\ndef signECDSA(signingKey, message) {\n    #the hash of the message\n    messageHash = sha3.keccak_256(bytes.fromhex(message)).hexdigest()\n    signature = signingKey.sign_digest(bytes.fromhex(messageHash), sigencode=sigencode_string)\n    return signature\n}\n"}
