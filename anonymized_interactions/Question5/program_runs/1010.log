1010,false,null,{"program":"// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0 {\n      *str++ = '-';\n      value = - value;\n    }\n    sprintf(str, \"%d\", value);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0 {\n      *str++ = '-';\n      value = - value;\n    }\n    sprintf(str, \"%d\", value);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = - value;\n    }\n    sprintf(str, \"%d\", value);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = - value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = - value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comman_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\");\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\");wow\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\");wow\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\");\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n   \nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\");\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\nWow this is not compiling\nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%str\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\nint main() {\n   printf(\"   %d\\n\", string_it(-5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\nint main() {\n   printf(\"   %d\\n\", string_it(5));\n   } \n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\nint main() {\n   printf(\"   %d\\n\", string_it(5));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string(int);\n\nint main() {\n   printf(\"   %d\\n\", string_it(5));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %d\\n\", string_it(5));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(5));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-5));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-500));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-5000));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(5000));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(50000));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(5000000));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(50000000));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(50000000));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(12345678));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(12345678));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 0) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-12345678));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    //printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    //printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 0) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-1234567));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    //printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    //printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 0) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-1234567));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    //printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    //printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 0) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
1010,false,null,{"program":"#include \"stdio.h\"\n#include \"malloc.h\"\n\nchar* string_it(int);\n\nint main() {\n   printf(\"   %s\\n\", string_it(-123457));\n} \n   \n// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0) {\n      *str++ = '-';\n      value = -value;\n    }\n    sprintf(str, \"%d\", value);\n    //printf(\"%s\\n\", str);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    //printf(\"%d\\n\", comma_count);\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 0) {\n        char * start = end - 3;\n        printf(\"%s\\n\", start);\n        strcpy(buffer, start);\n        *start= ',';\n        strcpy(start+1, buffer);\n        comma_count--;\n        end = start;\n        \n    }\n    return returned;\n   }\n//Wow this is not compiling\n\n       \n\n"}
