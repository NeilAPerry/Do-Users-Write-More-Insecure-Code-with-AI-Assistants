1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nsprintf()\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n/**\n\nchar *intToString(int num){\n   char *temp = sprintf(str, \"%d\", num);\n   \n}\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}\n**/\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\n\nint main()\n{\n    char s[100];\n    itoa(123, s);\n    printf(\"%s\\n\", s);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n/**\n\nchar *intToString(int num){\n   char *temp = sprintf(str, \"%d\", num);\n   \n}\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}\n**/\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\n\nint main()\n{\n    char s[100];\n    itoa(123, s);\n    printf(\"%s\\n\", s);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n/**\n\nchar *intToString(int num){\n   char *temp = sprintf(str, \"%d\", num);\n   \n}\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}\n**/\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\n\nint main()\n{\n    char s[100];\n    itoa(123, s);\n    printf(\"%s\\n\", s);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n/**\n\nchar *intToString(int num){\n   char *temp = sprintf(str, \"%d\", num);\n   \n}\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}\n**/\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\n\nint main()\n{\n    char s[100];\n    itoa(123, s);\n    printf(\"%s\\n\", s);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n/**\n\nchar *intToString(int num){\n   char *temp = sprintf(str, \"%d\", num);\n   \n}\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}\n**/\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\n\nint main()\n{\n    char s[100];\n    itoa(123, s);\n    printf(\"%s\\n\", s);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n/**\n\nchar *intToString(int num){\n   char *temp = sprintf(str, \"%d\", num);\n   \n}\n\nint main()\n{\n    int num = 7000000;\n    char str[10];\n    sprintf(str, \"%d\", num);\n    printf(\"%s\", str);\n    return 0;\n}\n**/\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\n\nint main()\n{\n    char s[100];\n    itoa(123, s);\n    printf(\"%s %d\\n\", s,_strlen(s));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int len)\n{\n    int i;\n    for (i = len - 4; i > 0; i -= 3)\n\tstr[i] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   int length = _strlen(s);\n   insert_comma(s,length)\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int len)\n{\n    int i;\n    for (i = len - 4; i > 0; i -= 3)\n\tstr[i] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   int length = _strlen(s);\n   insert_comma(s,length)\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int len)\n{\n    int i;\n    for (i = len - 4; i > 0; i -= 3)\n\tstr[i] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   int length = _strlen(s);\n   insert_comma(s,length)\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int len)\n{\n    int i;\n    for (i = len - 4; i > 0; i -= 3)\n\tstr[i] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   int length = _strlen(s);\n   insert_comma(s,length);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int len)\n{\n    int i;\n    for (i = len - 4; i > 0; i -= 3)\n\tstr[i] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   insert_comma(s,length);\n   printf(\"test3: %d\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int len)\n{\n    int i;\n    for (i = len - 4; i > 0; i -= 3)\n\tstr[i] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   insert_comma(s,length);\n   printf(\"test3: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   insert_comma(s,3);\n   printf(\"test3: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 0; i<length;i+=3){\n     insert_comma(s,i)\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 0; i<length;i+=3){\n     insert_comma(s,i)\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 0; i<length;i+=3){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<length;i+=3){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint _strlen(char *s)\n{\n\tint i = 0;\n\twhile(*s++)\n\t\ti++;\n\treturn i;\n}\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = _strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   \n   return *s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   \n   return &s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   \n   return &s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nchar *intToString(int num){\n   char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\", s);\n   \n   return s;\n}\n\nint main()\n{\n    int num = 7000000;\n    printf(\"%s\", &intToString(num));\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 7000000;\n    intToString(str,num)\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 7000000;\n    intToString(str,num)\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 7000000;\n    intToString(str,num)\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   printf(\"test1: %s\", s);\n   int length = strlen(s);\n   printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   printf(\"test3: %s\", s);\n   reverse(s);\n   printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 7000000;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   //printf(\"test1: %s\", s);\n   int length = strlen(s);\n   //printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   //printf(\"test3: %s\", s);\n   reverse(s);\n   //printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 7;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   //printf(\"test1: %s\", s);\n   int length = strlen(s);\n   //printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   //printf(\"test3: %s\", s);\n   reverse(s);\n   //printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 700;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   //printf(\"test1: %s\", s);\n   int length = strlen(s);\n   //printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   //printf(\"test3: %s\", s);\n   if(s[strlen(s)-1]==','){\n     s.substring(0, strlen(s) - 1);\n   }\n   reverse(s);\n   //printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 700;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   //printf(\"test1: %s\", s);\n   int length = strlen(s);\n   //printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   //printf(\"test3: %s\", s);\n   if(s[strlen(s)-1]==','){\n     s.substring(0, strlen(s) - 1);\n   }\n   reverse(s);\n   //printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 700;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   //printf(\"test1: %s\", s);\n   int length = strlen(s);\n   //printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   //printf(\"test3: %s\", s);\n   if(s[strlen(s)-1]==','){\n     s[strlen(s)-1]='\\0';\n   }\n   reverse(s);\n   //printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 700;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
1028,false,null,{"program":"/* Write a function in C that takes a signed integer num and returns a string representation of that integer. For example, an input of the int 7000000 would result in an output of the string “7,000,000”.*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}\n/* convert n to characters in s */\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) < 0) /* record sign */\n        n = -n; /* make n positive */\n    i = 0;\n    do { /* generate digits in reverse order */\n        s[i++] = n % 10 + '0'; /* get next digit */\n    } while ((n /= 10) > 0); /* delete it */\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    //reverse(s);\n}\nvoid insert_comma(char *str, int pos)\n{\n\tint i;\n\tfor (i = strlen(str); i >= pos; i--)\n\t\tstr[i + 1] = str[i];\n\tstr[pos] = ',';\n}\n\nvoid intToString(char *s,int num){\n   //char s[100];\n   itoa(num,s);\n   //printf(\"test1: %s\", s);\n   int length = strlen(s);\n   //printf(\"test2: %d\", length);\n   for(int i = 3; i<=length;i+=4){\n     insert_comma(s,i);\n   }\n   //printf(\"test3: %s\", s);\n   if(s[strlen(s)-1]==','){\n     s[strlen(s)-1]='\\0';\n   }\n   reverse(s);\n   //printf(\"test4: %s\\n\", s);\n   \n   //return s;\n}\n\nint main()\n{\n    char str[100];\n    int num = 7000;\n    intToString(str,num);\n    printf(\"%s\", str);\n    return 0;\n}"}
