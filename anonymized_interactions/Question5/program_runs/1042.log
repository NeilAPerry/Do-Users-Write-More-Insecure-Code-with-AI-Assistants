1042,false,null,{"program":"/*\nfunction in C that takes a signed integer \"num\" as input and returns a string interpretation of that integer\n*/\n\n#include \"holberton.h\"\n\n/**\n * print_number - prints an integer\n * @n: integer to print\n *\n * Return: void\n */\n\nvoid print_number(int n)\n{\n\tunsigned int num;\n\n\tif (n < 0)\n\t{\n\t\t_putchar('-');\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tnum = n;\n\t}\n\tif (num / 10)\n\t{\n\t\tprint_number(num / 10);\n\t}\n\t_putchar(num % 10 + '0');\n}\n\n\nvoid main(){\nprint(print_number(7000000));\n}"}
1042,false,null,{"program":"/*\nfunction in C that takes a signed integer \"num\" as input and returns a string interpretation of that integer\n*/\n\n//#include \"holberton.h\"\n\n/**\n * print_number - prints an integer\n * @n: integer to print\n *\n * Return: void\n */\n\nvoid print_number(int n)\n{\n\tunsigned int num;\n\n\tif (n < 0)\n\t{\n\t\t_putchar('-');\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tnum = n;\n\t}\n\tif (num / 10)\n\t{\n\t\tprint_number(num / 10);\n\t}\n\t_putchar(num % 10 + '0');\n}\n\n\nvoid main(){\nprint(print_number(7000000));\n}"}
1042,false,null,{"program":"/*\nfunction in C that takes a signed integer \"num\" as input and returns a string interpretation of that integer\n*/\n\n//#include \"holberton.h\"\n\n/**\n * print_number - prints an integer\n * @n: integer to print\n *\n * Return: void\n */\n\nvoid print_number(int n)\n{\n\tunsigned int num;\n\n\tif (n < 0)\n\t{\n\t\t_putchar('-');\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tnum = n;\n\t}\n\tif (num / 10)\n\t{\n\t\tprint_number(num / 10);\n\t}\n\t_putchar(num % 10 + '0');\n}\n\n\nvoid main(){\nprint(print_number(7000000));\n}"}
1042,false,null,{"program":"\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp)\n    {\n        temp /= 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num)\n    {\n        str[i++] = num % 10 + '0';\n        num /= 10;\n    }\n\n    str[i] = '\\0';\n\n    for (j = 0, k = 0; j < i; j++)\n    {\n        if (j % 3 == 0 && j != 0)\n        {\n            str_temp[k++] = ',';\n        }\n        str_temp[k++] = str[i - j - 1];\n    }\n\n    str_temp[k] = '\\0';\n\n    free(str);\n    return str_temp;\n}\n\nint main()\n{\n    int num = 7000000;\n    char *str = int_to_string(num);\n\n    printf(\"%s\\n\", str);\n\n    free(str);\n    return 0;\n}"}
1042,false,null,{"program":"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num != 0)\n    {\n        str[i] = num % 10 + '0';\n        num = num / 10;\n        i++;\n    }\n\n    str[i] = '\\0';\n\n    for (j = 0, k = strlen(str) - 1; j < strlen(str); j++, k--)\n    {\n        str_temp[j] = str[k];\n    }\n\n    str_temp[j] = '\\0';\n\n    return str_temp;\n}\n\nint main()\n{\n    int num = 7000000;\n    char *str = NULL;\n\n    str = int_to_string(num);\n\n    printf(\"%s\\n\", str);\n\n    return 0;\n}"}
1042,false,null,{"program":"char *int_to_string(int num)\n{\n    char *str = malloc(sizeof(char) * 100);\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    int count = 0;\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }\n    temp = num;\n    while (temp != 0)\n    {\n        str[i] = temp % 10 + '0';\n        temp = temp / 10;\n        i++;\n        count++;\n        if (count == 3 && temp != 0)\n        {\n            str[i] = ',';\n            i++;\n            count = 0;\n        }\n    }\n    str[i] = '\\0';\n    i--;\n    while (j < i)\n    {\n        char temp = str[j];\n        str[j] = str[i];\n        str[i] = temp;\n        j++;\n        i--;\n    }\n    return str;\n}\n\n\nint main(){\nprintf(*int_to_string(7000000);\n}"}
