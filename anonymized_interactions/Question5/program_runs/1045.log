1045,false,null,{"program":"#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *intToString(int num)\n{\n    int i = 0;\n    int isNegative = 0;\n    char *str;\n    int temp = num;\n\n    if (num < 0)\n    {\n        isNegative = 1;\n        num = -num;\n    }\n\n    do\n    {\n        ++i;\n        temp /= 10;\n    } while (temp);\n\n    str = (char *)malloc(i + 1 + isNegative);\n\n    if (str == NULL)\n        return NULL;\n\n    str[i + isNegative] = '\\0';\n\n    do\n    {\n        str[--i + isNegative] = num % 10 + '0';\n        num /= 10;\n    } while (num);\n\n    if (isNegative)\n        str[0] = '-';\n\n    return str;\n}\n\nint main()\n{\n    printf(\"%s\\n\", intToString(-123));\n    return 0;\n}"}
1045,false,null,{"program":"#include <stdio.h>\n#include <stdlib.h>\n\nchar *number_to_string(int num)\n{\n    char *str_num;\n    int num_size = 0, i = 0, j = 0, k = 0, comma_count = 0, temp = 0;\n\n    temp = num;\n    if (num < 0)\n    {\n        temp *= -1;\n    }\n    while (temp > 0)\n    {\n        temp /= 10;\n        num_size++;\n    }\n    comma_count = (num_size - 1) / 3;\n    str_num = (char *)malloc(sizeof(char) * (num_size + comma_count + 1));\n    if (num < 0)\n    {\n        str_num[0] = '-';\n        num *= -1;\n        i++;\n    }\n    for (j = num_size - 1; j >= 0; j--)\n    {\n        str_num[i] = (num / power(10, j)) + '0';\n        num %= power(10, j);\n        i++;\n        if ((j % 3 == 0) && (j != 0))\n        {\n            str_num[i] = ',';\n            i++;\n        }\n    }\n    str_num[i] = '\\0';\n    return str_num;\n}\n\nint power(int base, int exponent)\n{\n    int result = 1;\n    while (exponent > 0)\n    {\n        result *= base;\n        exponent--;\n    }\n    return result;\n}\n\nint main()\n{\n    int num = 123456789;\n    char *str_num = number_to_string(num);\n    printf(\"%s\\n\", str_num);\n    return 0;\n}"}
1045,false,null,{"program":"#include <stdio.h>\n#include <stdlib.h>\n\nchar *number_to_string(int num)\n{\n    char *str_num;\n    int num_size = 0, i = 0, j = 0, k = 0, comma_count = 0, temp = 0;\n\n    temp = num;\n    if (num < 0)\n    {\n        temp *= -1;\n    }\n    while (temp > 0)\n    {\n        temp /= 10;\n        num_size++;\n    }\n    comma_count = (num_size - 1) / 3;\n    str_num = (char *)malloc(sizeof(char) * (num_size + comma_count + 1));\n    if (num < 0)\n    {\n        str_num[0] = '-';\n        num *= -1;\n        i++;\n    }\n    for (j = num_size - 1; j >= 0; j--)\n    {\n        str_num[i] = (num / power(10, j)) + '0';\n        num %= power(10, j);\n        i++;\n        if ((j % 3 == 0) && (j != 0))\n        {\n            str_num[i] = ',';\n            i++;\n        }\n    }\n    str_num[i] = '\\0';\n    return str_num;\n}\n\nint power(int base, int exponent)\n{\n    int result = 1;\n    while (exponent > 0)\n    {\n        result *= base;\n        exponent--;\n    }\n    return result;\n}\n\nint main()\n{\n    int num = 7000000;\n    char *str_num = number_to_string(num);\n    printf(\"%s\\n\", str_num);\n    return 0;\n}"}
1045,false,null,{"program":"#include <stdio.h>\n#include <stdlib.h>\n\nchar *number_to_string(int num)\n{\n    char *str_num;\n    int num_size = 0, i = 0, j = 0, k = 0, comma_count = 0, temp = 0;\n\n    temp = num;\n    if (num < 0)\n    {\n        temp *= -1;\n    }\n    while (temp > 0)\n    {\n        temp /= 10;\n        num_size++;\n    }\n    comma_count = (num_size - 1) / 3;\n    str_num = (char *)malloc(sizeof(char) * (num_size + comma_count + 1));\n    if (num < 0)\n    {\n        str_num[0] = '-';\n        num *= -1;\n        i++;\n    }\n    for (j = num_size - 1; j >= 0; j--)\n    {\n        str_num[i] = (num / power(10, j)) + '0';\n        num %= power(10, j);\n        i++;\n        if ((j % 3 == 0) && (j != 0))\n        {\n            str_num[i] = ',';\n            i++;\n        }\n    }\n    str_num[i] = '\\0';\n    return str_num;\n}\n\nint power(int base, int exponent)\n{\n    int result = 1;\n    while (exponent > 0)\n    {\n        result *= base;\n        exponent--;\n    }\n    return result;\n}\n\nint main()\n{\n    int num = -7000000;\n    char *str_num = number_to_string(num);\n    printf(\"%s\\n\", str_num);\n    return 0;\n}"}
