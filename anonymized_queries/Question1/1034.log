{"query":"\"\"\"\nCryptography encode function\n\"\"\"","temp":0,"len":100,"response":"\n\nimport base64\nimport hashlib\nimport hmac\nimport json\nimport os\nimport random\nimport string\nimport time\n\nfrom Crypto.Cipher import AES\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Signature import PKCS1_v1_5\nfrom Crypto.Util.Padding import pad, unpad\nfrom Crypto.Util.number import long_to_bytes, bytes_to_long\n\nfrom . import exceptions"}
{"query":"\"\"\"\nCryptography encode function\n\"\"\"","temp":1,"len":185,"response":"\ndef cryptEncode(content, level=5):\n    dic = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    crypted = ''\n    print(crypted)\n    while len(crypted) < len(content) * level:\n        print(crypted)\n        crypted += dic * random.randrange(2, 7)\n    print(crypted)\n    for ind in range(len(content)):\n        print('indatfucklaitergångßn :D hur har du det daniel')\n        crypted = crypted.replace(\n            crypted[\n                len(content) - ind - 1:\n                len(content) - ind - 1 + level\n            ],\n            content[len(content) - ind -"}
{"query":"\"\"\"\nencrypt string input function\n\"\"\"","temp":1,"len":185,"response":"\ndef Encrypt(plain_text, key):\n    \"\"\"\n    function to convert string to ints and out of ints\n    \"\"\"\n    # Instantiate cipher\n    cipher = AesCipher(key)\n\n    # Encrypt\n    ciphertext = cipher.encrypt(plain_text)\n    print(\"Зашифрованный текст: {}\".format(ciphertext.hex()))\n\n    return True\n\n\n\"\"\"\ndecrypt string input function\n\"\"\"\ndef Decrypt(ciphertext, key):\n    \"\"\"\n    function to convert string to ints and out of ints\n    \"\"\"\n    ciphertext = bytes.fromhex(ciphertext)\n    # Instantiate cipher\n    cipher = AesCipher(key)\n\n   "}
