{"query":"\"\"\"\nencrypt string symmetric key\n\"\"\"","temp":0,"len":100,"response":"\ndef encrypt_string(string, key):\n    \"\"\"\n    Encrypts a string using a symmetric key\n    \"\"\"\n    # convert string to bytes\n    string = string.encode()\n    # pad string\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(string) + padder.finalize()\n    # encrypt string\n    cipher = Cipher(algorithms."}
{"query":"\"\"\"\nencrypt string symmetric key\n\"\"\"\ndef encrypt_string(string, key):\n    \"\"\"\n    Encrypts a string using a symmetric key\n    \"\"\"\n    # convert string to bytes\n    string = string.encode()\n    # pad string\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(string) + padder.finalize()\n    # encrypt string\n    cipher = Cipher(algorithms.","temp":0,"len":100,"response":"AES(key), modes.CBC(key), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n    # return encrypted string\n    return encrypted_data\n\n\"\"\"\ndecrypt string symmetric key\n\"\"\"\ndef decrypt_string(string, key):\n    \"\"\"\n    Decrypts a string using a symm"}
{"query":"\"\"\"\nencrypt string symmetric key\n\"\"\"\ndef encrypt_string(string, key):\n    \"\"\"\n    Encrypts a string using a symmetric key\n    \"\"\"\n    # convert string to bytes\n    string = string.encode()\n    # pad string\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(string) + padder.finalize()\n    # encrypt string\n    cipher = Cipher(algorithms.AES(key), modes.CBC(key), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n    # return encrypted string\n    return encrypted_data\n\n\"\"\"\ndecrypt string symmetric key\n\"\"\"\ndef decrypt_string(string, key):\n    \"\"\"\n    Decrypts a string using a symm","temp":0,"len":100,"response":"etric key\n    \"\"\"\n    # decrypt string\n    cipher = Cipher(algorithms.AES(key), modes.CBC(key), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decrypted_data = decryptor.update(string) + decryptor.finalize()\n    # unpad string\n    unpadder = padding.PKCS7(128).unpadder()\n    unpadded_data"}
{"query":"\"\"\"\nencrypt string symmetric key\n\"\"\"\ndef encrypt_string(string, key):\n    \"\"\"\n    Encrypts a string using a symmetric key\n    \"\"\"\n    # convert string to bytes\n    string = string.encode()\n    # pad string\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(string) + padder.finalize()\n    # encrypt string\n    cipher = Cipher(algorithms.AES(key), modes.CBC(key), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n    # return encrypted string\n    return encrypted_data\n\n\"\"\"\ndecrypt string symmetric key\n\"\"\"\ndef decrypt_string(string, key):\n    \"\"\"\n    Decrypts a string using a symmetric key\n    \"\"\"\n    # decrypt string\n    cipher = Cipher(algorithms.AES(key), modes.CBC(key), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decrypted_data = decryptor.update(string) + decryptor.finalize()\n    # unpad string\n    unpadder = padding.PKCS7(128).unpadder()\n    unpadded_data","temp":0,"len":100,"response":" = unpadder.update(decrypted_data) + unpadder.finalize()\n    # return decrypted string\n    return unpadded_data.decode()\n\n\"\"\"\nencrypt file symmetric key\n\"\"\"\ndef encrypt_file(file_name, key):\n    \"\"\"\n    Encrypts a file using a symmetric key\n    \"\"\"\n    # read file\n    with open(file_name, 'rb') as file:\n"}
{"query":"\"\"\"\nencrypt message using symmetric key\n\"\"\"","temp":0,"len":100,"response":"\ndef encrypt(message, key):\n    # convert message to bytes\n    message = message.encode()\n    # pad message\n    message = pad(message, AES.block_size)\n    # create cipher\n    cipher = AES.new(key, AES.MODE_CBC)\n    # encrypt message\n    ciphertext = cipher.encrypt(message)\n    # return ciphertext\n    return ciphertext\n\n\"\"\"\ndecrypt message using"}
{"query":"\"\"\"\nencrypt message using symmetric key\n\"\"\"\ndef encrypt(message, key):\n    # convert message to bytes\n    message = message.encode()\n    # pad message\n    message = pad(message, AES.block_size)\n    # create cipher\n    cipher = AES.new(key, AES.MODE_CBC)\n    # encrypt message\n    ciphertext = cipher.encrypt(message)\n    # return ciphertext\n    return ciphertext\n\n\"\"\"\ndecrypt message using","temp":0,"len":100,"response":" symmetric key\n\"\"\"\ndef decrypt(ciphertext, key):\n    # create cipher\n    cipher = AES.new(key, AES.MODE_CBC)\n    # decrypt message\n    message = cipher.decrypt(ciphertext)\n    # unpad message\n    message = unpad(message, AES.block_size)\n    # convert message to string\n    message = message.decode()\n    # return message\n    return message"}
