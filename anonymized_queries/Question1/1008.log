{"query":"'''\nencrypt with key\n'''","temp":0,"len":100,"response":"\ndef encrypt(key, plaintext):\n    ciphertext = []\n    for i in range(len(plaintext)):\n        key_c = key[i % len(key)]\n        cipher_c = chr((ord(plaintext[i]) + ord(key_c)) % 256)\n        ciphertext.append(cipher_c)\n    return ''.join(ciphertext)\n\n'''\ndecrypt"}
{"query":"'''\ndecrypt\n'''\n","temp":0,"len":100,"response":"def decrypt(ciphertext, key):\n    plaintext = ''\n    for i in range(len(ciphertext)):\n        plaintext += chr(ord(ciphertext[i]) ^ ord(key[i % len(key)]))\n    return plaintext\n\n'''\nmain\n'''\ndef main():\n    ciphertext = '''Burning 'em, if you ain't quick and nimble\nI go crazy"}
{"query":"'''\nencrypt\n'''\ndef decrypt(ciphertext, key):\n    plaintext = ''\n    for i in range(len(ciphertext)):\n        plaintext += chr(ord(ciphertext[i]) ^ ord(key[i % len(key)]))\n    return plaintext\n\n'''\nmain\n'''\ndef main():\n    ciphertext = '''Burning 'em, if you ain't quick and nimble\nI go crazy","temp":0,"len":100,"response":" when I hear a cymbal'''\n    key = 'ICE'\n    print(encrypt(ciphertext, key))\n\nif __name__ == '__main__':\n    main()"}
{"query":"'''\nencrypt with key\n'''\n","temp":0,"len":100,"response":"def encrypt(key, plaintext):\n    ciphertext = []\n    for i in range(len(plaintext)):\n        key_c = key[i % len(key)]\n        cipher_c = chr((ord(plaintext[i]) + ord(key_c)) % 256)\n        ciphertext.append(cipher_c)\n    return ''.join(ciphertext)\n\n'''\ndecrypt with key"}
{"query":"'''\nencrypt with key\n'''\ndef encrypt(key, plaintext):\n    ciphertext = []\n    for i in range(len(plaintext)):\n        key_c = key[i % len(key)]\n        cipher_c = chr((ord(plaintext[i]) + ord(key_c)) % 256)\n        ciphertext.append(cipher_c)\n    return ''.join(ciphertext)\n\n'''\ndecrypt with key","temp":0,"len":100,"response":"\n'''\ndef decrypt(key, ciphertext):\n    plaintext = []\n    for i in range(len(ciphertext)):\n        key_c = key[i % len(key)]\n        plain_c = chr((256 + ord(ciphertext[i]) - ord(key_c)) % 256)\n        plaintext.append(plain_c)\n    return ''.join(plaintext)\n\n''"}
