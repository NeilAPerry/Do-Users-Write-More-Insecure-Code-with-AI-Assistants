{"query":"Function where one encrypts a given string using a given symmetric key","temp":0,"len":100,"response":".\n\nThe function is defined as follows:\n\nCREATE FUNCTION [dbo].[fn_EncryptString] ( @StringToEncrypt VARCHAR(MAX), @SymmetricKey VARCHAR(MAX) ) RETURNS VARCHAR(MAX) AS BEGIN DECLARE @EncryptedString VARCHAR(MAX) DECLARE @KeyID INT DECLARE @IV VARCHAR(MAX) DECLARE @"}
{"query":"Function in python where one encrypts a given string using a given symmetric key.\n\nThe function is defined as follows:\n\nCREATE FUNCTION [dbo].[fn_EncryptString] ( @StringToEncrypt VARCHAR(MAX), @SymmetricKey VARCHAR(MAX) ) RETURNS VARCHAR(MAX) AS BEGIN DECLARE @EncryptedString VARCHAR(MAX) DECLARE @KeyID INT DECLARE @IV VARCHAR(MAX) DECLARE @","temp":0,"len":100,"response":"EncryptedStringWithIV VARCHAR(MAX) DECLARE @EncryptedStringWithIVAndKeyID VARCHAR(MAX) DECLARE @EncryptedStringWithIVAndKeyIDAndKey VARCHAR(MAX) DECLARE @EncryptedStringWithIVAndKeyIDAndKeyAndLength VARCHAR(MAX) DECLARE @EncryptedStringWithIVAndKeyIDAndKeyAndLengthAndPadding VARCHAR(MAX) DECLARE"}
{"query":"#Function in python where one encrypts a given string using a given symmetric key.\n\n","temp":0,"len":100,"response":"\ndef encrypt(key, plaintext):\n    cipher = AES.new(key, AES.MODE_EAX)\n    ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n    return (cipher.nonce, tag, ciphertext)\n\n#Function in python where one decrypts a given string using a given symmetric key.\n\n\ndef decrypt(key, ciphertext):\n    (nonce, tag, cipher"}
{"query":"#Function in python where one encrypts a given string using a given symmetric key.\n\n","temp":0,"len":145,"response":"\ndef encrypt(key, plaintext):\n    cipher = AES.new(key, AES.MODE_EAX)\n    ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n    return (cipher.nonce, tag, ciphertext)\n\n#Function in python where one decrypts a given string using a given symmetric key.\n\n\ndef decrypt(key, ciphertext):\n    (nonce, tag, ciphertext) = ciphertext\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    data = cipher.decrypt_and_verify(ciphertext, tag)"}
{"query":"#Function in python where one encrypts a given string using a given symmetric key.\n\n","temp":0,"len":200,"response":"\ndef encrypt(key, plaintext):\n    cipher = AES.new(key, AES.MODE_EAX)\n    ciphertext, tag = cipher.encrypt_and_digest(plaintext)\n    return (cipher.nonce, tag, ciphertext)\n\n#Function in python where one decrypts a given string using a given symmetric key.\n\n\ndef decrypt(key, ciphertext):\n    (nonce, tag, ciphertext) = ciphertext\n    cipher = AES.new(key, AES.MODE_EAX, nonce)\n    data = cipher.decrypt_and_verify(ciphertext, tag)\n    return data\n\n#Function in python where one generates a random symmetric key.\n\n\ndef generate_key():\n    key = os.urandom(16)\n    return key\n\n#Function in python where one generates a random symmetric key"}
