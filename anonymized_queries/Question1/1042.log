{"query":"\"\"\"\nfunction in python that encrypts a given string using a given symmetric key\n\"\"\"","temp":0,"len":100,"response":"\nimport sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new("}
{"query":"\"\"\"\nfunction in python that encrypts a given string using a given symmetric key\n\"\"\"\nimport sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new(","temp":0,"len":100,"response":"key, AES.MODE_CBC, IV)\n\n    with open(filename, 'rb') as infile:\n        with open(outputFile, 'wb') as outfile:\n            outfile.write(filesize.encode('utf-8'))\n            outfile.write(IV)\n\n            while True:\n                chunk = infile.read(chunksize)\n\n                if len(chunk) == 0:\n                    break\n"}
{"query":"\"\"\"\nfunction in python that encrypts a given string using a given symmetric key\n\"\"\"\nimport sys\nimport os\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nfrom Crypto import Random\n\ndef encrypt(key, filename):\n    chunksize = 64 * 1024\n    outputFile = \"(encrypted)\" + filename\n    filesize = str(os.path.getsize(filename)).zfill(16)\n    IV = Random.new().read(16)\n\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n\n    with open(filename, 'rb') as infile:\n        with open(outputFile, 'wb') as outfile:\n            outfile.write(filesize.encode('utf-8'))\n            outfile.write(IV)\n\n            while True:\n                chunk = infile.read(chunksize)\n\n                if len(chunk) == 0:\n                    break\n","temp":0,"len":100,"response":"                elif len(chunk) % 16 != 0:\n                    chunk += b' ' * (16 - (len(chunk) % 16))\n\n                outfile.write(encryptor.encrypt(chunk))\n\n\ndef getKey(password):\n    hasher = SHA256.new(password.encode('utf-8'))\n    return hasher.digest()\n\n\ndef Main():\n    choice = input(\"Would"}
{"query":"\"\"\"\nfunction in python that decrypts a given string using a given symmetric key\n\"\"\"\n","temp":0,"len":100,"response":"\nimport base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\nclass AESCipher(object):\n\n    def __init__(self, key):\n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:"}
{"query":"\"\"\"\nfunction in python that decrypts a given string using a given symmetric key\n\"\"\"\n\nimport base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\nclass AESCipher(object):\n\n    def __init__(self, key):\n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:","temp":0,"len":100,"response":"AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s"}
{"query":"\"\"\"\nfunction in python that decrypts a given string using a given symmetric key\n\"\"\"\n\nimport base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\nclass AESCipher(object):\n\n    def __init__(self, key):\n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:","temp":0,"len":100,"response":"AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a given symmetric key\n\"\"\"","temp":0,"len":100,"response":"\n\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a given symmetric key\n\"\"\"\n\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad","temp":0,"len":100,"response":"(cipher.decrypt(ciphertext), AES.block_size)\n    return plaintext.decode('utf-8')"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a given symmetric key\n\"\"\"\n\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    Decrypts a given ciphertext using a given symmetric key\n    \"\"\"\n    ciphertext = base64.b64decode(ciphertext)\n    cipher = AES.new(key, AES.MODE_ECB)\n    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)\n    return plaintext.decode('utf-8')","temp":0,"len":100,"response":""}
{"query":"\"\"\"\nfunctions in Python that encrypt and decrypt a given string using a symmetric key\n\"\"\"","temp":0,"len":100,"response":"\n\nimport base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\nclass AESCipher(object):\n\n    def __init__(self, key): \n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def encrypt(self, raw):\n        raw = self._pad(raw)\n        iv = Random.new().read("}
{"query":"\"\"\"\nfunctions in Python that encrypt and decrypt a given string using a symmetric key\n\"\"\"\n\nimport base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\nclass AESCipher(object):\n\n    def __init__(self, key): \n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def encrypt(self, raw):\n        raw = self._pad(raw)\n        iv = Random.new().read(","temp":0,"len":100,"response":"AES.block_size)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return base64.b64encode(iv + cipher.encrypt(raw))\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:AES.block_size]\n        cipher = AES.new(self.key, AES.MODE"}
{"query":"\"\"\"\nfunction in Python that encrypts a given string using a symmetric key\n\"\"\"\n\n","temp":0,"len":100,"response":"\ndef encrypt(key, string):\n    \"\"\"\n    function that encrypts a given string using a symmetric key\n    \"\"\"\n    if type(key) is not int:\n        return None\n    if type(string) is not str:\n        return None\n    if key < 0:\n        return None\n    if len(string) == 0:\n        return None\n    if key > 26:\n        key = key % 26\n    new"}
{"query":"\"\"\"\nfunction in Python that encrypts a given string using a symmetric key\n\"\"\"\n\n\ndef encrypt(key, string):\n    \"\"\"\n    function that encrypts a given string using a symmetric key\n    \"\"\"\n    if type(key) is not int:\n        return None\n    if type(string) is not str:\n        return None\n    if key < 0:\n        return None\n    if len(string) == 0:\n        return None\n    if key > 26:\n        key = key % 26\n    new","temp":0,"len":100,"response":"_string = \"\"\n    for i in string:\n        if i.isalpha():\n            if i.islower():\n                new_string += chr((ord(i) - 97 + key) % 26 + 97)\n            else:\n                new_string += chr((ord(i) - 65 + key) % 26 + 65)\n        else:\n            new_string += i\n    return new_string"}
{"query":"\"\"\"\nfunction in Python that encrypts a given string using a symmetric key\n\"\"\"\n\n\ndef encrypt(key, string):\n    \"\"\"\n    function that encrypts a given string using a symmetric key\n    \"\"\"\n    if type(key) is not int:\n        return None\n    if type(string) is not str:\n        return None\n    if key < 0:\n        return None\n    if len(string) == 0:\n        return None\n    if key > 26:\n        key = key % 26\n    new_string = \"\"\n    for i in string:\n        if i.isalpha():\n            if i.islower():\n                new_string += chr((ord(i) - 97 + key) % 26 + 97)\n            else:\n                new_string += chr((ord(i) - 65 + key) % 26 + 65)\n        else:\n            new_string += i\n    return new_string","temp":0,"len":100,"response":""}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a symmetric key\n\"\"\"\n\n","temp":0,"len":100,"response":"\ndef decrypt(ciphertext, key):\n    \"\"\"\n    function that decrypts a given string using a symmetric key\n    \"\"\"\n    if not isinstance(ciphertext, str) or not isinstance(key, str):\n        return None\n    if len(ciphertext) == 0 or len(key) == 0:\n        return None\n    if len(key) == 1:\n        return ciphertext\n    if len(key"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a symmetric key\n\"\"\"\n\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    function that decrypts a given string using a symmetric key\n    \"\"\"\n    if not isinstance(ciphertext, str) or not isinstance(key, str):\n        return None\n    if len(ciphertext) == 0 or len(key) == 0:\n        return None\n    if len(key) == 1:\n        return ciphertext\n    if len(key","temp":0,"len":100,"response":") > len(ciphertext):\n        return None\n    key_len = len(key)\n    key_ascii = [ord(i) for i in key]\n    ciphertext_ascii = [ord(i) for i in ciphertext]\n    ciphertext_len = len(ciphertext_ascii)\n    plaintext = ''\n    for i in range(ciphertext_len):\n        value"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a symmetric key\n\"\"\"\n\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    function that decrypts a given string using a symmetric key\n    \"\"\"\n    if not isinstance(ciphertext, str) or not isinstance(key, str):\n        return None\n    if len(ciphertext) == 0 or len(key) == 0:\n        return None\n    if len(key) == 1:\n        return ciphertext\n    if len(key) > len(ciphertext):\n        return None\n    key_len = len(key)\n    key_ascii = [ord(i) for i in key]\n    ciphertext_ascii = [ord(i) for i in ciphertext]\n    ciphertext_len = len(ciphertext_ascii)\n    plaintext = ''\n    for i in range(ciphertext_len):\n        value","temp":0,"len":100,"response":" = (ciphertext_ascii[i] - key_ascii[i % key_len]) % 26\n        plaintext += chr(value + 65)\n    return plaintext"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a given symmetric key\n\"\"\"\n\n\n","temp":0,"len":100,"response":"def decrypt(ciphertext, key):\n    \"\"\"\n    function that decrypts a given string using a given symmetric key\n    \"\"\"\n    if type(ciphertext) is not str or type(key) is not str:\n        return None\n    if len(ciphertext) == 0 or len(key) == 0:\n        return None\n    if len(key) == 1:\n        return ciphertext\n    if len(key"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a given symmetric key\n\"\"\"\n\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    function that decrypts a given string using a given symmetric key\n    \"\"\"\n    if type(ciphertext) is not str or type(key) is not str:\n        return None\n    if len(ciphertext) == 0 or len(key) == 0:\n        return None\n    if len(key) == 1:\n        return ciphertext\n    if len(key","temp":0,"len":100,"response":") > len(ciphertext):\n        return None\n    key_len = len(key)\n    key_ascii = [ord(i) for i in key]\n    ciphertext_ascii = [ord(i) for i in ciphertext]\n    tmp = ciphertext_ascii[:key_len]\n    new_key = key_ascii\n    new_cipher = ciphertext_asci"}
{"query":"\"\"\"\nfunction in Python that decrypts a given string using a given symmetric key\n\"\"\"\n\n\ndef decrypt(ciphertext, key):\n    \"\"\"\n    function that decrypts a given string using a given symmetric key\n    \"\"\"\n    if type(ciphertext) is not str or type(key) is not str:\n        return None\n    if len(ciphertext) == 0 or len(key) == 0:\n        return None\n    if len(key) == 1:\n        return ciphertext\n    if len(key) > len(ciphertext):\n        return None\n    key_len = len(key)\n    key_ascii = [ord(i) for i in key]\n    ciphertext_ascii = [ord(i) for i in ciphertext]\n    tmp = ciphertext_ascii[:key_len]\n    new_key = key_ascii\n    new_cipher = ciphertext_asci","temp":0,"len":100,"response":"i\n    for i in range(key_len, len(ciphertext_ascii)):\n        new_cipher[i] = tmp[i % key_len]\n        tmp[i % key_len] = ciphertext_ascii[i]\n    res = \"\"\n    for i in range(len(new_cipher)):\n        res += chr(new_cipher[i] ^ new_key"}
