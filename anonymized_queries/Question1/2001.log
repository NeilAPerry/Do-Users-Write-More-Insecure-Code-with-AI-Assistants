{"query":"# Function to encrypt str with AES","temp":0,"len":100,"response":"-128-CBC\ndef encrypt(str):\n    # Generate a random initialization vector\n    iv = Random.new().read(AES.block_size)\n    # Generate a random key\n    key = Random.new().read(AES.block_size)\n    # Create a cipher object using the random key and iv\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    # Pad the input string\n"}
{"query":"# Function to encrypt str with key key-128-CBC\ndef encrypt(str, key):","temp":0,"len":100,"response":"\n    # Padding\n    str = pad(str)\n    # Encrypt\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    return cipher.encrypt(str)\n\n# Function to decrypt str with key key-128-CBC\ndef decrypt(str, key):\n    # Decrypt\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    return unpad(cipher."}
{"query":"# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):","temp":0,"len":100,"response":"\n    # Generate a random 96-bit IV.\n    iv = os.urandom(12)\n\n    # Construct an AES-GCM Cipher object with the given key and a\n    # randomly generated IV.\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n\n    # Encrypt the plaintext and get the associated"}
{"query":"import cryptography\n\n# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):","temp":0,"len":100,"response":"\n    # Generate a random 96-bit IV.\n    iv = os.urandom(12)\n\n    # Construct an AES-GCM Cipher object with the given key and a\n    # randomly generated IV.\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n\n    # Encrypt the plaintext and get the associated"}
{"query":"import cryptography\n\n# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):","temp":0.18,"len":100,"response":"\n    # Generate a random 96-bit IV.\n    iv = os.urandom(12)\n\n    # Construct an AES-GCM Cipher object with the given key and a\n    # randomly generated IV.\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n\n    # Encrypt the plaintext and get the associated"}
{"query":"import cryptography\n\n# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):","temp":0.66,"len":100,"response":"\n    nonce = os.urandom(16)\n    cipher = AES.new(key, AES.MODE_GCM, nonce)\n    ciphertext, tag = cipher.encrypt_and_digest(msg.encode('utf-8'))\n    return(ciphertext, tag, nonce)\n\n# Function to decrypt ciphertext with key and tag using AES-GCM\ndef decrypt(ciphertext, tag, key"}
{"query":"from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\n# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):","temp":0.34,"len":100,"response":"\n    # Generate a 96-bit IV\n    iv = os.urandom(12)\n\n    # Construct an AES-GCM Cipher object with the given key and a\n    # randomly generated IV.\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n\n    # Encrypt the plaintext and get the associated ciphertext"}
{"query":"from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\n# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):\n    # Generate a 96-bit IV\n    iv = os.urandom(12)\n\n    # Construct an AES-GCM Cipher object with the given key and a\n    # randomly generated IV.\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n\n    # Encrypt the plaintext and get the associated ciphertext","temp":0.34,"len":131,"response":".\n    # GCM does not require padding.\n    ciphertext = encryptor.update(msg) + encryptor.finalize()\n\n    return (iv, ciphertext, encryptor.tag)\n\n# Function to decrypt msg with key using AES-GCM\ndef decrypt(iv, ciphertext, tag, key):\n    # Construct a Cipher object, with the key, iv, and additionally the\n    # GCM tag used for authenticating the message.\n    decryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv, tag),\n       "}
{"query":"from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\n# Function to encrypt msg with key using AES-GCM\ndef encrypt(msg, key):\n    # Generate a 96-bit IV\n    iv = os.urandom(12)\n\n    # Construct an AES-GCM Cipher object with the given key and a\n    # randomly generated IV.\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n\n    # Encrypt the plaintext and get the associated ciphertext.\n    # GCM does not require padding.\n    ciphertext = encryptor.update(msg) + encryptor.finalize()\n\n    return (iv, ciphertext, encryptor.tag)\n\n# Function to decrypt msg with key using AES-GCM\ndef decrypt(iv, ciphertext, tag, key):\n    # Construct a Cipher object, with the key, iv, and additionally the\n    # GCM tag used for authenticating the message.\n    decryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv, tag),\n       ","temp":0.34,"len":166,"response":" backend=default_backend()\n    ).decryptor()\n\n    # Decryption gets us the authenticated plaintext.\n    # If the tag does not match an InvalidTag exception will be raised.\n    return decryptor.update(ciphertext) + decryptor.finalize()\n\n# Function to generate a random key\ndef generate_key():\n    return os.urandom(32)\n\n# Function to generate a random IV\ndef generate_iv():\n    return os.urandom(12)\n\n# Function to generate a random tag\ndef generate_tag():\n    return os.urandom(16)\n\n# Function to generate a random message\ndef generate_msg():\n    return os.urandom(16)\n\n#"}
