{"query":"\n\ndef encrypt(string,key):\n\n\n\n\ndef decrypt(string, key):","temp":0,"len":100,"response":"\n\n\n\ndef main():\n    print(\"Welcome to the Encryption/Decryption Program\")\n    print(\"Please enter the string you would like to encrypt/decrypt\")\n    string = input()\n    print(\"Please enter the key you would like to use\")\n    key = input()\n    print(\"Would you like to encrypt or decrypt?\")\n    choice = input()\n    if choice == \"encrypt\":\n        encrypt(string,key)\n"}
{"query":"def encrypt(string,key):","temp":0,"len":100,"response":"\n    cipher = ''\n    for char in string:\n        if char == ' ':\n            cipher = cipher + char\n        elif char.isupper():\n            cipher = cipher + chr((ord(char) + key - 65) % 26 + 65)\n        else:\n            cipher = cipher + chr((ord(char) + key - 97) % 26 + 97)\n    return cipher\n\ndef decrypt(string,key):\n"}
{"query":"def decrypt(string, key):\n#decrypt string given a key","temp":0,"len":100,"response":"\n    decrypted = \"\"\n    for i in range(len(string)):\n        decrypted += chr(ord(string[i]) ^ key)\n    return decrypted\n\ndef main():\n    #get the encrypted string\n    encrypted = \"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"\n    encrypted ="}
{"query":"#encrypt a string given a key\ndef encrypt(string,key):\n","temp":0,"len":100,"response":"    #convert string to list\n    string = list(string)\n    #convert key to list\n    key = list(key)\n    #create a list to store the encrypted string\n    encrypted = []\n    #loop through the string\n    for i in range(len(string)):\n        #get the ascii value of the string\n        string_ascii = ord(string[i])\n        #get the asci"}
{"query":"#encrypt a string given a key\ndef encrypt(string,key):","temp":0,"len":169,"response":"\n    #convert string to list\n    string = list(string)\n    #convert key to list\n    key = list(key)\n    #create a list to store the encrypted string\n    encrypted = []\n    #loop through the string\n    for i in range(len(string)):\n        #get the ascii value of the string\n        string_ascii = ord(string[i])\n        #get the ascii value of the key\n        key_ascii = ord(key[i])\n        #add the ascii values together\n        sum_ascii = string_ascii + key_ascii\n        #if the sum is greater than 126, subtract 94\n        if sum_ascii"}
{"query":"#encrypt a string given a key\ndef encrypt(string,key):","temp":0,"len":200,"response":"\n    #convert string to list\n    string = list(string)\n    #convert key to list\n    key = list(key)\n    #create a list to store the encrypted string\n    encrypted = []\n    #loop through the string\n    for i in range(len(string)):\n        #get the ascii value of the string\n        string_ascii = ord(string[i])\n        #get the ascii value of the key\n        key_ascii = ord(key[i])\n        #add the ascii values together\n        sum_ascii = string_ascii + key_ascii\n        #if the sum is greater than 126, subtract 94\n        if sum_ascii > 126:\n            sum_ascii -= 94\n        #append the encrypted character to the list\n        encrypted.append(chr("}
{"query":"#encrypt a string given a key\ndef encrypt(string,key):\n    ","temp":0.62,"len":38,"response":"#create a final string to store the result\n    final_string = \"\"\n\n    #loop through the string\n    for i in range(len(string)):\n       "}
{"query":"#encrypt a string given a key\ndef encrypt(string,key):\n    \n       ","temp":0.62,"len":200,"response":" #to ensure that the key is as long as the string\n    if len(key)<len(string):\n        key=key*len(string)\n    \n    #to ensure that the key is shorter than the string\n    if len(key)>len(string):\n        key=key[:len(string)]\n    \n    #to ensure that the key is in capital letters\n    if key.islower():\n        key=key.upper()\n    \n    #to ensure that the string is in capital letters\n    if string.islower():\n        string=string.upper()\n    \n    #to ensure that the string has no space\n    if string.isspace():\n        string=string.replace(\" \",\"\")\n    \n    #to ensure that the key has no space\n    if key.isspace():\n        key=key.replace(\" \",\"\")\n    \n"}
