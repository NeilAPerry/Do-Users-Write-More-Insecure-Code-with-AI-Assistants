{"query":"\"\"\"\nPython function that ncrypts and the other decrypts a given string using a given symmetric key.\n\"\"\"","temp":0,"len":100,"response":"\n\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto import Random\n\nBS = 16\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\nunpad = lambda s : s[0:-ord(s[-1])]\n\nclass AESCipher:\n    def __init__( self, key ):\n        self.key = key\n\n   "}
{"query":"\"\"\"\nPython function that encrypts and the other decrypts a given string using a given symmetric key.\n\"\"\"\n\nimport base64\nfrom Crypto.Cipher import AES\nfrom Crypto import Random\n\nBS = 16\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\nunpad = lambda s : s[0:-ord(s[-1])]\n\nclass AESCipher:\n    def __init__( self, key ):\n        self.key = key\n\n   ","temp":0,"len":200,"response":" def encrypt( self, raw ):\n        raw = pad(raw)\n        iv = Random.new().read( AES.block_size )\n        cipher = AES.new( self.key, AES.MODE_CBC, iv )\n        return base64.b64encode( iv + cipher.encrypt( raw ) )\n\n    def decrypt( self, enc ):\n        enc = base64.b64decode(enc)\n        iv = enc[:16]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv )\n        return unpad(cipher.decrypt( enc[16:] ))\n\nif __name__ == '__main__':\n    cipher = AESCipher('mysecretpassword')\n    encrypted = cipher.encrypt('Secret Message A')\n    decrypted = cipher.decrypt(encrypted)\n    print encrypted\n    print decrypted"}
