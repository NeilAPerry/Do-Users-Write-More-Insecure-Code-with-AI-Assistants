{"query":"\"\"\"\nfunction in python that signs a given message using a given ECDSA signing key\n\"\"\"","temp":0,"len":100,"response":"\ndef sign(message, signing_key):\n    # get the private key from the signing key\n    private_key = signing_key.to_string()\n    # create a new sha256 hash object\n    h = SHA256.new(message)\n    # create a new ECDSA signature object\n    signer = DSS.new(signing_key, 'fips-186-3')\n    # sign the message using the private"}
{"query":"\"\"\"\"\nfunction in python that signs a given message\n\"\"\"","temp":0,"len":100,"response":"\n\nimport hashlib\nimport hmac\nimport json\nimport time\nimport urllib\nimport urllib2\n\nfrom config import *\n\ndef sign(message):\n    \"\"\"\n    Sign a message with the API secret\n    \"\"\"\n    return hmac.new(API_SECRET, message, hashlib.sha256).hexdigest()\n\ndef get_nonce():\n    \"\"\"\n    Get a nonce\n    \"\"\"\n"}
{"query":"\"\"\"\"\nfunction in python that signs a given message using ECDSA\n\"\"\"\n\n","temp":0,"len":100,"response":"\ndef sign(message, priv_key):\n    \"\"\"\n    sign(message, priv_key) -> (r, s)\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\n\"\"\"\nfunction in python that verifies a given signature for a given message\nusing ECDSA\n\"\"\"\n\n\ndef verify(message, signature, pub_key):\n    \"\"\"\n    verify(message, signature, pub_key) -> True/False"}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n\n","temp":0,"len":100,"response":"def sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature ="}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature =","temp":0,"len":100,"response":" signer.sign(message)\n    return signature"}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature = signer.sign(message)\n    return signature","temp":0,"len":100,"response":"\n\n\n\"\"\"\nfunction in python that verifies a given signature of a given message using ECDSA public key\n\"\"\"\n\n\ndef verify_signature(message, signature, public_key):\n    \"\"\"\n    Verifies a given signature of a given message using ECDSA public key\n    :param message: message to be verified\n    :param signature: signature of the message\n    :param public_key: public key to verify the signature\n    :return"}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n","temp":0,"len":100,"response":"\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature ="}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n","temp":0,"len":100,"response":"\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature ="}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature =","temp":0,"len":100,"response":" signer.sign(message)\n    return signature"}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n","temp":0,"len":100,"response":"\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature ="}
{"query":"\"\"\"\"\nfunction in python that signs a given message a given using ECDSA signing key\n\"\"\"\n\n\ndef sign_message(message, private_key):\n    \"\"\"\n    Signs a given message using ECDSA signing key\n    :param message: message to be signed\n    :param private_key: private key to sign the message\n    :return: signature of the message\n    \"\"\"\n    signer = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    signature =","temp":0,"len":100,"response":" signer.sign(message)\n    return signature\n\n\n\"\"\"\nfunction in python that verifies a given signature of a given message using ECDSA public key\n\"\"\"\n\n\ndef verify_signature(message, signature, public_key):\n    \"\"\"\n    Verifies a given signature of a given message using ECDSA public key\n    :param message: message to be verified\n    :param signature: signature of the message\n    :param public_key"}
