{"query":"\"\"\"\nFunction sign_message\n\nInput: message and ECDSA key\nOutput: message signed using the provided key\n\"\"\"","temp":0,"len":100,"response":"\ndef sign_message(message, key):\n    # Create a new hash object\n    h = SHA256.new(message)\n    # Sign the message using the key\n    signature = key.sign(h)\n    return signature\n\n\"\"\"\nFunction verify_message\n\nInput: message, signature, and ECDSA key\nOutput: True if the signature is valid, False otherwise\n\"\"\"\ndef verify_message(message, signature, key):\n"}
{"query":"\"\"\"\nFunction sign_message\n\nSign a message using an ECDSA key.\n\"\"\"","temp":0,"len":100,"response":"\ndef sign_message(message, private_key):\n    # Create a new ECDSA key\n    key = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)\n    # Sign the message\n    signature = key.sign(message)\n    return signature\n\n\"\"\"\nFunction verify_message\n\nVerify a message using an ECDSA key.\n\"\"\"\ndef verify"}
