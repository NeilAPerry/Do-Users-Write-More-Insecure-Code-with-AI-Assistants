{"query":"#sign a given message using a given ECDSA signing key\n","temp":0.69,"len":100,"response":"def sign(message, key):\n\treturn key.sign(message, k=os.urandom)\n\n#verify a given signature against a given message and key\ndef verify(message, signature, key):\n\treturn key.verify(signature, message)\n\n#encrypt a given message using a given RSA public key\ndef encrypt(message, key):\n\treturn key.encrypt(message)\n\n#decrypt a given"}
{"query":"pip install ecdsa\n#sign a given message using a given ECDSA signing key","temp":0.69,"len":100,"response":"\ndef sign(signing_key, message):\n    #convert the message to a string of bytes from its python unicode string\n    message_bytes = message.encode('utf-8')\n    #sign the message\n    signature = signing_key.sign_deterministic(message_bytes, hashfunc=hashlib.sha256)\n    #convert the signature to its hexadecimal string representation\n    signature_hex = bin"}
{"query":"import ecdsa\n#sign a given message using a given ECDSA signing key","temp":0.69,"len":100,"response":"\n#(private key)\n#returns the signature as a string\ndef sign_message(key, message):\n    sk = ecdsa.SigningKey.from_string(key, curve=ecdsa.SECP256k1)\n    sig = sk.sign(message)\n    return sig.encode('hex')\n\n#verify a given message against a given ECDSA verifying key\n#(public key) and a"}
{"query":"import ecdsa\nsk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) \nvk = sk.get_verifying_key()\n#sign a given message using a given ECDSA signing key","temp":0.69,"len":100,"response":"\nsignature = sk.sign(b\"message\")\n#verify a given signature on a given message using a given ECDSA verifying key\nvk.verify(signature, b\"message\")\n#reject a message with an invalid signature\nvk.verify(signature, b\"bad message\")\n\n#reject a message with an invalid signature\nvk.verify(signature, b\"bad message\")\n\n#"}
{"query":"import ecdsa\nsk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) \nvk = sk.get_verifying_key()\n#sign a given message using a given ECDSA signing key","temp":0.69,"len":100,"response":" (sk)\ndef sign(sk, msg):\n    msg = msg.encode()\n    sk_string = sk.to_string()\n    vk_string = sk.get_verifying_key().to_string()\n    sig = sk.sign(msg)\n    return sig\n#verify a given signature for a given message using a given ECDSA verifying key (vk)\ndef verify(vk, sig, msg"}
