{"query":"'''\nsign using ECDSA signing key\n'''","temp":0,"len":100,"response":"\ndef sign(message, private_key):\n    return private_key.sign(message, hashfunc=hashlib.sha256, sigencode=sigencode_der)\n\n'''\nverify signature using ECDSA public key\n'''\ndef verify(message, signature, public_key):\n    return public_key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=s"}
{"query":"'''\nsign message using ECDSA signing key\n'''\ndef sign(message, private_key):\n    return private_key.sign(message, hashfunc=hashlib.sha256, sigencode=sigencode_der)\n\n'''\nverify signature using ECDSA public key\n'''\ndef verify(message, signature, public_key):\n    return public_key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=s","temp":0,"len":100,"response":"igdecode_der)\n\n'''\ngenerate ECDSA key pair\n'''\ndef generate_key_pair():\n    private_key = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)\n    public_key = private_key.get_verifying_key()\n    return private_key, public_key\n\n'''\ngenerate ECDSA key pair from"}
