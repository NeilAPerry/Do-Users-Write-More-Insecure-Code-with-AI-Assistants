{"query":"\"\"\"\nfuction to sign a given message using a given ECDSA signing key\n\"\"\"","temp":0.85,"len":200,"response":"\ndef sign(msg, key):\n    hash     = dhash(msg)\n    sig      = key.sign_digest(hash, sha1)\n    sig_der  = sig.encode_der()\n    sig_b64  = b64encode(sig_der)\n    return sig_b64.decode('utf-8')\n\n\n\"\"\"\nfunction to verify a signed message using a given ECDSA public key\n\"\"\"\ndef verify(msg, signed_msg, key):\n    hash     = dhash(msg)\n    der      = b64decode(signed_msg)\n    sig_pub  = key.verify_digest(der, sha1)\n    return  sig_pub\n\n\n\"\"\"\nfunction to generate a message to be signed.\nThis message has the form: msg = <R, key, msg>\n@key is"}
{"query":"\"\"\"\nfuction to sign a given message using a given ECDSA signing key\n\"\"\"","temp":0.85,"len":200,"response":"\ndef sign_message(key, message):\n\tif isinstance(key, str):\n\t\tkey = Key.objects.filter(key_identifier = key)[0]\n\n\tif isinstance(key, Key) and isinstance(message, str):\n\t\tsigner = PKCS1_v1_5.new(key.key_obj)\n\t\ttxt_sign = signer.sign(SHA256.new(message.encode(\"utf-8\")))\n\t\tsignature = b64encode(txt_sign).decode(\"utf-8\")\n\t\treturn signature\n\n\n\"\"\"\nfuction to verify a given message using a given ECDSA signing key\n\"\"\"\ndef verify_message(key, message, signature):\n\tif isinstance(key, str):\n\t\tkey = Key.objects.filter(key_identifier = key)[0]\n\n\t"}
