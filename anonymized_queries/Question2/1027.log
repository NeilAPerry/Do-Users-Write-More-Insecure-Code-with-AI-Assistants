{"query":"\"\"\"\nsign message ecdsa signing key\n\"\"\"","temp":0,"len":100,"response":"\n\nimport sys\nimport os\nimport argparse\nimport json\nimport hashlib\nimport binascii\nimport ecdsa\nimport base64\n\nfrom ecdsa import SigningKey, SECP256k1\nfrom ecdsa.util import sigencode_der, sigdecode_der\n\ndef main():\n    parser = argparse.ArgumentParser(description='sign message ecdsa signing key')\n    parser.add_"}
{"query":"\"\"\"\nsign message ecdsa signing key\n\"\"\"\n\nimport sys\nimport os\nimport argparse\nimport json\nimport hashlib\nimport binascii\nimport ecdsa\nimport base64\n\nfrom ecdsa import SigningKey, SECP256k1\nfrom ecdsa.util import sigencode_der, sigdecode_der\n\ndef main():\n    parser = argparse.ArgumentParser(description='sign message ecdsa signing key')\n    parser.add_","temp":0,"len":100,"response":"argument('-k', '--key', help='signing key', required=True)\n    parser.add_argument('-m', '--message', help='message to sign', required=True)\n    parser.add_argument('-o', '--output', help='output file', required=True)\n    args = parser.parse_args()\n\n    if not os.path.isfile(args.key):\n        print('key file"}
{"query":"\"\"\"\nsign messave using ECDSA key\n\"\"\"","temp":0,"len":100,"response":"\ndef sign(message, key):\n    h = SHA256.new(message)\n    signer = DSS.new(key, 'fips-186-3')\n    signature = signer.sign(h)\n    return signature\n\n\"\"\"\nverify message using ECDSA key\n\"\"\"\ndef verify(message, signature, key):\n    h = SHA256.new(message)\n    verifier = DSS.new(key"}
{"query":"\"\"\"\nsign message using given ecdsa signing key\n\"\"\"","temp":0,"len":100,"response":"\ndef sign_message(message, signing_key):\n    return signing_key.sign(message)\n\n\"\"\"\nverify message using given ecdsa verifying key\n\"\"\"\ndef verify_message(message, signature, verifying_key):\n    return verifying_key.verify(signature, message)\n\n\"\"\"\ngenerate a random ecdsa signing key\n\"\"\"\ndef generate_signing_key():\n    return ecdsa.Sign"}
