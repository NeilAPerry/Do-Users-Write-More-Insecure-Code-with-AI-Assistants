{"query":"\"\"\"\nECDSA signing key\n\"\"\"","temp":0,"len":200,"response":"\n\nfrom . import _lib\nfrom . import _ffi\nfrom . import _raw\nfrom . import _errors\nfrom . import _ellipticcurve\nfrom . import _asymmetric\nfrom . import _hash\nfrom . import _pkcs1\nfrom . import _pkcs8\nfrom . import _x509\nfrom . import _x509name\nfrom . import _x509store\nfrom . import _x509verify\nfrom . import _x509ext\nfrom . import _x509v3\nfrom . import _pkcs7\nfrom . import _pkcs12\nfrom . import _cms\nfrom . import _ts\nfrom . import _rand\nfrom . import _bio\nfrom . import _engine\nfrom . import _util\nfrom . import _version\nfrom . import _config\nfrom . import _ssl\nfrom . import _txt2obj\nfrom"}
{"query":"\"\"\"\nECDSA signing key\n\"\"\"\n\nfrom . import _lib\nfrom . import _ffi\nfrom . import _raw\nfrom . import _errors\nfrom . import _ellipticcurve\nfrom . import _asymmetric\nfrom . import _hash\nfrom . import _pkcs1\nfrom . import _pkcs8\nfrom . import _x509\nfrom . import _x509name\nfrom . import _x509store\nfrom . import _x509verify\nfrom . import _x509ext\nfrom . import _x509v3\nfrom . import _pkcs7\nfrom . import _pkcs12\nfrom . import _cms\nfrom . import _ts\nfrom . import _rand\nfrom . import _bio\nfrom . import _engine\nfrom . import _util\nfrom . import _version\nfrom . import _config\nfrom . import _ssl\nfrom . import _txt2obj\nfrom","temp":0.67,"len":200,"response":" . import _pem\nfrom . import _hmac\nfrom . import _rc2\nfrom . import _rc4\nfrom . import _md2\nfrom . import _md4\nfrom . import _md5\nfrom . import _sha\nfrom . import _ripemd\nfrom . import _whrlpool\nfrom . import _des\nfrom . import _des3\nfrom . import _idea\nfrom . import _aes\nfrom . import _rsa\nfrom . import _bn\nfrom . import _dsa\nfrom . import _ec\nfrom . import _dh\nfrom . import _dsa\nfrom . import _ec\nfrom . import _dh\nfrom . import _buffer\nfrom . import _rand\nfrom . import _version\nfrom . import _nid\nfrom . import _objects\nfrom . import _err\nfrom . import _asn1\nfrom . import _symhacks"}
{"query":"def sign(){\n  \"\"\"\n  signs a given message using a given ECDSA signing key\n  \"\"\"\n}","temp":0.67,"len":200,"response":"\n</code>\nI understand the process for getting the private key from the seed.\nThe problem I am having is that I don't know how I create the seed from the mnemonic phrase.\nI've seen some js from github that does something like this:\n<code>\nconst hdkey = require('ethereumjs-wallet/hdkey');\nconst bip39 = require('bip39');\nconst mnemonic = 'human pink throw ship glide stupid hammer like fall emotion take erase';\nconst seed = bip39.mnemonicToSeed(mnemonic);\nconst hdwallet = hdkey.fromMasterSeed(seed);\nconst wallet_hdpath = \"m/44'/60'/0'/0/0\";\nconst wallet = hdwallet.derivePath(wallet_hdpath).getWallet();\nconst address = '0x' + wallet.getAddress().toString(\""}
