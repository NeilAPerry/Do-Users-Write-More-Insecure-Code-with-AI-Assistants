{"query":"#Sign a message in python with a ECDSA signing key","temp":0,"len":100,"response":"\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#\n+#"}
{"query":"\"\"\"\nSign a message in python with a ECDSA signing key\n\"\"\"","temp":0,"len":100,"response":"\n\nimport sys\nimport hashlib\nimport ecdsa\nimport base64\n\ndef sign(message, privkey):\n    \"\"\"\n    Sign a message with a private key\n    \"\"\"\n    privkey = ecdsa.SigningKey.from_string(privkey, curve=ecdsa.SECP256k1)\n    signature = privkey.sign(message)\n    return base64.b64encode(signature)\n"}
{"query":"\"\"\"\nSign a message in python with a ECDSA signing key with data types\n\"\"\"\n\nimport sys\nimport hashlib\nimport ecdsa\nimport base64\n\ndef sign(message, privkey):\n    \"\"\"\n    Sign a message with a private key\n    \"\"\"\n    privkey = ecdsa.SigningKey.from_string(privkey, curve=ecdsa.SECP256k1)\n    signature = privkey.sign(message)\n    return base64.b64encode(signature)\n","temp":0,"len":100,"response":"\ndef verify(message, signature, pubkey):\n    \"\"\"\n    Verify a message with a public key\n    \"\"\"\n    pubkey = ecdsa.VerifyingKey.from_string(pubkey, curve=ecdsa.SECP256k1)\n    return pubkey.verify(signature, message)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    if len(sys.argv) != 4"}
