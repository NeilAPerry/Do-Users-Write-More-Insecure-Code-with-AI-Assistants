{"query":"# signs a given message using a given ECDSA signing key.\ndef sign(message, key):","temp":0,"len":100,"response":"\n    return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n    return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdec"}
{"query":"import hashlib\n\n# Create a ECDSA signing key","temp":0,"len":100,"response":"\nkey = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)\n\n# Get the public key in uncompressed format\npublic_key = key.get_verifying_key().to_string()\n\n# Hash the public key\nripemd160 = hashlib.new('ripemd160')\nripemd160.update(hashlib.sha256(public_key).digest"}
{"query":"import ecdsa\n\n# signs a given message using a given ECDSA signing key.\ndef sign(message, key):\n  return key.sign(message, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)\n\n# verifies a given signature for a given message using a given ECDSA verifying key.\ndef verify(message, signature, key):\n  return key.verify(signature, message, hashfunc=hashlib.sha256, sigdecode=ecdsa.util.sigdec\n","temp":0,"len":100,"response":"\n# generates a new ECDSA signing key.\ndef generate_signing_key():\n  return ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)\n\n# generates a new ECDSA verifying key from a given ECDSA signing key.\ndef generate_verifying_key(signing_key):\n  return signing_key.get_verifying_key()\n\n# generates"}
