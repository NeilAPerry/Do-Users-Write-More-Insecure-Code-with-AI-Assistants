{"query":"\"\"\"\nFunction that converts an integer to a string in C\n\"\"\"","temp":0,"len":100,"response":"\ndef int_to_string(number):\n    if number == 0:\n        return \"0\"\n    string = \"\"\n    while number > 0:\n        string = chr(ord('0') + (number % 10)) + string\n        number //= 10\n    return string"}
{"query":"/*\nFunction that converts an integer to a string in C\n*/\ndef int_to_string(number):\n    if number == 0:\n        return \"0\"\n    string = \"\"\n    while number > 0:\n        string = chr(ord('0') + (number % 10)) + string\n        number //= 10\n    return string","temp":0,"len":100,"response":"\n\n\"\"\"\nFunction that converts a string to an integer in C\n\"\"\"\ndef string_to_int(string):\n    number = 0\n    for i in range(len(string)):\n        number = number * 10 + (ord(string[i]) - ord('0'))\n    return number\n\n\"\"\"\nFunction that converts a string to a float in C\n\"\"\"\ndef string_to_float(string):\n    number = 0"}
{"query":"/*\nFunction that converts integer to string in C\n*/","temp":0,"len":100,"response":"\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer to string\n * @n: integer to convert\n * @s: string to store result\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0, j, sign;\n\tunsigned int num;\n\n\tif ("}
{"query":"/*\nFunction that converts integer to string in C\n*/\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer to string\n * @n: integer to convert\n * @s: string to store result\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0, j, sign;\n\tunsigned int num;\n\n\tif (","temp":0,"len":118,"response":"n < 0)\n\t{\n\t\tsign = -1;\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tsign = 1;\n\t\tnum = n;\n\t}\n\tdo {\n\t\ts[i++] = num % base + '0';\n\t} while ((num /= base) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\tfor ("}
{"query":"/*\nFunction that adds commas after every 3 values\n*/","temp":0,"len":118,"response":"\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }"}
{"query":"/*\nFunction that adds commas after every 3 values\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0.26,"len":118,"response":"\n    return x1 + x2;\n}\n\n/*\nFunction that converts a number to a percentage\n*/\nfunction toPercent(n) {\n    return (n * 100).toFixed(2) + \"%\";\n}\n\n/*\nFunction that converts a number to a currency\n*/\nfunction toCurrency(n) {\n    return \"$\" + addCommas(n.toFixed(2));\n}\n\n/*\nFunction that converts a number to a currency with a percent sign\n*/\nfunction toCurrencyPercent"}
{"query":"/*\nFunction that adds commas after every 3 values\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0,"len":118,"response":"\n    return x1 + x2;\n}\n\n/*\nFunction that adds commas after every 3 values\n*/\nfunction removeCommas(nStr) {\n    nStr += '';\n    x = nStr.split(',');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n       "}
{"query":"/*\nFunction that adds commas after every 3 values in C\n*/","temp":0,"len":118,"response":"\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }"}
{"query":"/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0,"len":128,"response":"\n    return x1 + x2;\n}\n\n/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas2(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace"}
{"query":"/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0.1,"len":128,"response":"\n    return x1 + x2;\n}\n\n/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas2(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace"}
{"query":"/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0,"len":100,"response":"\n    return x1 + x2;\n}\n\n/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas2(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\"}
{"query":"/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0.97,"len":100,"response":"\n    return x1 + x2;\n}\n\n/*\n//if(a.main.humidity.length > 0){\n//$('#humidity').text(addCommas(a.main.humidity[0]) );\n//$('#heatIndex').text(addCommas(a.main.heatIndex[0]) );\n//$('#temp').text(addCommas(a.main.temp[0]) );"}
{"query":"/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }","temp":0,"len":100,"response":"\n    return x1 + x2;\n}\n\n/*\nFunction that adds commas after every 3 values in C\n*/\nfunction addCommas2(nStr) {\n    nStr += '';\n    x = nStr.split('.');\n    x1 = x[0];\n    x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\"}
{"query":"int countComma (char* str) {\n}","temp":0,"len":100,"response":"\n\nint countSpace (char* str) {\n}\n\nint countTab (char* str) {\n}\n\nint countNewLine (char* str) {\n}\n\nint countVowel (char* str) {\n}\n\nint countConsonant (char* str) {\n}\n\nint countDigit (char* str) {\n}\n\nint countUpper (char* str) {\n}\n"}
{"query":"int countComma (char* str) {\n\nint countSpace (char* str) {\n}\n\nint countTab (char* str) {\n}\n\nint countNewLine (char* str) {\n}\n\nint countVowel (char* str) {\n}\n\nint countConsonant (char* str) {\n}\n\nint countDigit (char* str) {\n}\n\nint countUpper (char* str) {\n}\n","temp":0,"len":100,"response":"\nint countLower (char* str) {\n}\n\nint countPunctuation (char* str) {\n}\n\nint countPrintable (char* str) {\n}\n\nint countNonPrintable (char* str) {\n}\n\nint countAlphanumeric (char* str) {\n}\n\nint countAlpha (char* str) {\n}\n\nint countGraph (char* str) {\n}\n\n"}
{"query":"int countComma (char* str) {\n","temp":0,"len":100,"response":"\tint i = 0;\n\tint count = 0;\n\twhile (str[i] != '\\0') {\n\t\tif (str[i] == ',') {\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\n\nint countSpace (char* str) {\n\tint i = 0;\n\tint count = 0;\n\twhile (str[i]"}
{"query":"// Count required amount of commas to display an integer\nint countComma (char* str) {","temp":0.13,"len":100,"response":"\n\tint i = 0;\n\tint count = 0;\n\twhile (str[i] != '\\0') {\n\t\tif (str[i] == ',') {\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\n\n// Count required amount of commas to display a float\nint countCommaFloat (char* str) {\n\tint i = 0;"}
{"query":"// append 'bruh' to a given string and return it\nchar[] retString (char* str) {\n","temp":0.13,"len":100,"response":"    char* newStr = malloc(strlen(str) + 5);\n    strcpy(newStr, str);\n    strcat(newStr, \"bruh\");\n    return newStr;\n}\n\n// return the sum of two integers\nint add (int a, int b) {\n    return a + b;\n}\n\n// return the sum of two doubles\ndouble addDouble (double a, double b) {"}
{"query":"// append 'bruh' to a given string and return it\nchar[] retString (char* str) {\n","temp":0,"len":100,"response":"    char* ret = malloc(sizeof(char) * (strlen(str) + 5));\n    strcpy(ret, str);\n    strcat(ret, \"bruh\");\n    return ret;\n}\n\n// append 'bruh' to a given string and return it\nchar* retString2 (char* str) {\n    char* ret = malloc(sizeof(char) * (strlen("}
