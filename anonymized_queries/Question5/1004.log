{"query":"\"\"\"\nFunction repr\n\nTakes in a signed integer and returns the string representation of that integer.\n\"\"\"","temp":0,"len":100,"response":"\n\ndef repr(num):\n    if num == 0:\n        return \"0\"\n    elif num < 0:\n        return \"-\" + repr(-num)\n    else:\n        return repr(num // 10) + str(num % 10)\n\nprint(repr(123))\nprint(repr(-123))\nprint(repr(0))"}
{"query":"/*\nFunction repr\n\nTakes in a signed integer and returns the string representation of that integer.\n*/","temp":0,"len":100,"response":"\n\nchar *repr(int n) {\n    char *str = malloc(sizeof(char) * MAX_DIGITS);\n    int i = 0;\n    int sign = 1;\n    if (n < 0) {\n        sign = -1;\n        n *= -1;\n    }\n    while (n > 0) {\n        str[i++] = (n % 10) + '0';"}
{"query":"/*\nFunction repr\n\nTakes in a signed integer and returns the string representation of that integer.\n*/\n\nchar *repr(int n) {\n    char *str = malloc(sizeof(char) * MAX_DIGITS);\n    int i = 0;\n    int sign = 1;\n    if (n < 0) {\n        sign = -1;\n        n *= -1;\n    }\n    while (n > 0) {\n        str[i++] = (n % 10) + '0';","temp":0,"len":140,"response":"\n        n /= 10;\n    }\n    if (sign == -1) {\n        str[i++] = '-';\n    }\n    str[i] = '\\0';\n    reverse(str);\n    return str;\n}\n\n/*\nFunction reverse\n\nTakes in a string and reverses it.\n*/\n\nvoid reverse(char *str) {\n    int i = 0;\n    int j = strlen(str) - 1;\n    while (i < j) {\n        char temp = str[i];\n        str[i] = str[j];\n        str"}
{"query":"/*\nFunction repr\n\nTakes in a signed integer and returns the string representation of that integer.\n*/\n\nchar *repr(int n) {\n    char *str = malloc(sizeof(char) * MAX_DIGITS);\n    int i = 0;\n    int sign = 1;\n    if (n < 0) {\n        sign = -1;\n        n *= -1;\n    }\n    while (n > 0) {\n        str[i++] = (n % 10) + '0';\n        n /= 10;\n    }\n    if (sign == -1) {\n        str[i++] = '-';\n    }\n    str[i] = '\\0';\n    reverse(str);\n    return str;\n}\n\n/*\nFunction reverse\n\nTakes in a string and reverses it.\n*/\n\nvoid reverse(char *str) {\n    int i = 0;\n    int j = strlen(str) - 1;\n    while (i < j) {\n        char temp = str[i];\n        str[i] = str[j];\n        str","temp":0,"len":170,"response":"[j] = temp;\n        i++;\n        j--;\n    }\n}\n\n/*\nFunction strlen\n\nTakes in a string and returns the length of that string.\n*/\n\nint strlen(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}\n\n/*\nFunction strcmp\n\nTakes in two strings and returns 0 if they are equal, 1 if the first string is\ngreater than the second, and -1 if the first string is less than the second.\n*/\n\nint strcmp(char *str1, char *str2) {\n    int i = 0;\n    while (str"}
{"query":"/*\nFunction repr\n\nTakes in a signed integer and returns the string representation of that integer with commas every three numbers.\n*/\n\nchar *repr(int n) {\n    char *str = malloc(sizeof(char) * MAX_DIGITS);\n    int i = 0;\n    int sign = 1;\n    if (n < 0) {\n        sign = -1;\n        n *= -1;\n    }\n    while (n > 0) {\n        str[i++] = (n % 10) + '0';\n        n /= 10;\n    }\n    if (sign == -1) {\n        str[i++] = '-';\n    }\n    str[i] = '\\0';\n    reverse(str);\n    return str;\n}\n\n/*\nFunction reverse\n\nTakes in a string and reverses it.\n*/\n\nvoid reverse(char *str) {\n    int i = 0;\n    int j = strlen(str) - 1;\n    while (i < j) {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n        i++;\n        j--;\n    }\n}\n\n/*\nFunction strlen\n\nTakes in a string and returns the length of that string.\n*/\n\nint strlen(char *str) {\n    int i = 0;\n    while (str[i] != '\\0') {\n        i++;\n    }\n    return i;\n}\n\n/*\nFunction strcmp\n\nTakes in two strings and returns 0 if they are equal, 1 if the first string is\ngreater than the second, and -1 if the first string is less than the second.\n*/\n\nint strcmp(char *str1, char *str2) {\n    int i = 0;\n    while (str","temp":0,"len":170,"response":"1[i] != '\\0' && str2[i] != '\\0') {\n        if (str1[i] > str2[i]) {\n            return 1;\n        } else if (str1[i] < str2[i]) {\n            return -1;\n        }\n        i++;\n    }\n    if (str1[i] == '\\0' && str2[i] == '\\0') {\n        return 0;\n    } else if (str1[i] == '\\0') {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n\n/*\nFunction strcpy\n\nTakes in two strings and copies the first string into the second string"}
{"query":"/*\nFunction repr\n\nTakes in a signed integer and returns the string representation of that integer with commas every three numbers.\n*/","temp":0,"len":170,"response":"\n\nfunction repr(num) {\n    var str = num.toString();\n    var len = str.length;\n    var result = \"\";\n    var count = 0;\n    for (var i = len - 1; i >= 0; i--) {\n        result = str[i] + result;\n        count++;\n        if (count % 3 == 0 && i != 0) {\n            result = \",\" + result;\n        }\n    }\n    return result;\n}\n\n/*\nFunction get_data\n\nTakes in a string representing a URL and returns a promise that resolves to the JSON data at that URL.\n*/\n\nfunction get_data(url) {\n    return new Promise(function(resolve, reject)"}
{"query":"/*\nC Function repr\n\nTakes in a signed integer and returns the string representation of that integer with commas every three numbers.\n*/","temp":0,"len":170,"response":"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *repr(int n) {\n    char *str = malloc(sizeof(char) * 12);\n    char *str_ptr = str;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int neg = 0;\n    if (n < 0) {\n        neg = 1;\n        n = -n;\n    }\n    while (n > 0) {\n        str[i] = (n % 10) + '0';\n        n /= 10;\n        i++;\n    }\n    len = i"}
{"query":"/*\nC Function repr\n\nTakes in a signed integer and returns the string representation of that integer.\n*/","temp":0,"len":170,"response":"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_str(int n) {\n    int i = 0;\n    int is_negative = 0;\n    char *str = malloc(sizeof(char) * 12);\n    if (n < 0) {\n        is_negative = 1;\n        n = -n;\n    }\n    do {\n        str[i++] = n % 10 + '0';\n    } while ((n /= 10) > 0);\n    if (is_negative) {\n        str[i++] = '-';\n    }\n    str[i] = '\\0';\n   "}
