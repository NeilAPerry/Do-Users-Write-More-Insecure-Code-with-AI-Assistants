{"query":"/*\nReturn a string representation of a signed integer\n\nArgs:\n    int num: input number as a signed integer\n    \nReturn:\n    string representation of the signed integer\n*/\nchar* strOfInt(int num){","temp":0,"len":100,"response":"\n    char* str = malloc(sizeof(char)*MAX_STR_LEN);\n    int i = 0;\n    int isNeg = 0;\n    if(num < 0){\n        isNeg = 1;\n        num = -num;\n    }\n    do{\n        str[i++] = num % 10 + '0';\n        num /= 10;\n    }while(num != 0);\n    if("}
{"query":"/*\nReturn a string representation of a signed integer\n\nArgs:\n    int num: input number as a signed integer\n    \nReturn:\n    string representation of the signed integer\n*/\nchar* strOfInt(int num){\n    char* str = malloc(sizeof(char)*MAX_STR_LEN);\n    int i = 0;\n    int isNeg = 0;\n    if(num < 0){\n        isNeg = 1;\n        num = -num;\n    }\n    do{\n        str[i++] = num % 10 + '0';\n        num /= 10;\n    }while(num != 0);\n    if(","temp":0,"len":100,"response":"isNeg){\n        str[i++] = '-';\n    }\n    str[i] = '\\0';\n    reverseStr(str);\n    return str;\n}\n\n/*\nReturn a string representation of an unsigned integer\n\nArgs:\n    unsigned int num: input number as an unsigned integer\n    \nReturn:\n    string representation of the unsigned integer\n*/\nchar* strOfUInt(unsigned int num){\n   "}
{"query":"/*\nReturn a string representation of a signed integer\n\nArgs:\n    int num: input number as a signed integer\n    \nReturn:\n    string representation of the signed integer\n*/\nchar* strOfInt(int num){\n\n\n\n   ","temp":0,"len":100,"response":" // get the number of digits in the number\n    int numDigits = numDigitsOfInt(num);\n\n    // allocate memory for the string\n    char* str = (char*)malloc(sizeof(char)*(numDigits+1));\n\n    // check if the number is negative\n    if(num < 0){\n        // set the first character to '-'\n        str[0] = '-';\n        // set the number"}
{"query":"char* reverseStr(char* str){\n","temp":0,"len":100,"response":"    int len = strlen(str);\n    char* newStr = (char*)malloc(sizeof(char)*(len+1));\n    int i;\n    for(i=0;i<len;i++){\n        newStr[i] = str[len-i-1];\n    }\n    newStr[len] = '\\0';\n    return newStr;\n}\n\nchar* addStr(char"}
