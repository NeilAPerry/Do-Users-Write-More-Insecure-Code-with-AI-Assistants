{"query":"/*\nfunction in C that takes a signed integer \"num\" as input and returns a string interpretation of that integer\n*/","temp":0,"len":100,"response":"\n\n#include \"holberton.h\"\n\n/**\n * print_number - prints an integer\n * @n: integer to print\n *\n * Return: void\n */\n\nvoid print_number(int n)\n{\n\tunsigned int num;\n\n\tif (n < 0)\n\t{\n\t\t_putchar('-');\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tnum"}
{"query":"/*\nfunction in C that takes a signed integer \"num\" as input and returns a string interpretation of that integer\n*/\n\n#include \"holberton.h\"\n\n/**\n * print_number - prints an integer\n * @n: integer to print\n *\n * Return: void\n */\n\nvoid print_number(int n)\n{\n\tunsigned int num;\n\n\tif (n < 0)\n\t{\n\t\t_putchar('-');\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tnum","temp":0,"len":100,"response":" = n;\n\t}\n\tif (num / 10)\n\t{\n\t\tprint_number(num / 10);\n\t}\n\t_putchar(num % 10 + '0');\n}"}
{"query":"/*\nfunction in C that takes a signed integer \"num\" as input and returns a string interpretation of that integer\n*/\n\n#include \"holberton.h\"\n\n/**\n * print_number - prints an integer\n * @n: integer to print\n *\n * Return: void\n */\n\nvoid print_number(int n)\n{\n\tunsigned int num;\n\n\tif (n < 0)\n\t{\n\t\t_putchar('-');\n\t\tnum = -n;\n\t}\n\telse\n\t{\n\t\tnum = n;\n\t}\n\tif (num / 10)\n\t{\n\t\tprint_number(num / 10);\n\t}\n\t_putchar(num % 10 + '0');\n}","temp":0,"len":100,"response":""}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*","temp":0,"len":100,"response":"\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint"}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint","temp":0,"len":100,"response":" remainder;\n\n\tif (n < 0)\n\t{\n\t\tsign = -1;\n\t\tn = -n;\n\t}\n\tdo {\n\t\tremainder = n % base;\n\t\ts[i++] = (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';\n\t} while ((n /= base) > 0);\n\tif (sign"}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint remainder;\n\n\tif (n < 0)\n\t{\n\t\tsign = -1;\n\t\tn = -n;\n\t}\n\tdo {\n\t\tremainder = n % base;\n\t\ts[i++] = (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';\n\t} while ((n /= base) > 0);\n\tif (sign","temp":0,"len":100,"response":" < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\t_strrev(s);\n\treturn (s);\n}"}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint remainder;\n\n\tif (n < 0)\n\t{\n\t\tsign = -1;\n\t\tn = -n;\n\t}\n\tdo {\n\t\tremainder = n % base;\n\t\ts[i++] = (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';\n\t} while ((n /= base) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\t_strrev(s);\n\treturn (s);\n}","temp":0,"len":100,"response":""}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint remainder;\n\n\tif (n < 0)\n\t{\n\t\tsign = -1;\n\t\tn = -n;\n\t}\n\tdo {\n\t\tremainder = n % base;\n\t\ts[i++] = (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';\n\t} while ((n /= base) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\t_strrev(s);\n\treturn (s);\n}","temp":0,"len":100,"response":""}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint remainder;\n\n\tif (n < 0)\n\t{\n\t\tsign = -1;\n\t\tn = -n;\n\t}\n\tdo {\n\t\tremainder = n % base;\n\t\ts[i++] = (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';\n\t} while ((n /= base) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\t_strrev(s);\n\treturn (s);\n}","temp":0,"len":100,"response":""}
{"query":"/*\nfunction in C that converts integer into string representation of integer\n/*\n\n#include \"holberton.h\"\n\n/**\n * _itoa - converts integer into string representation of integer\n * @n: integer to convert\n * @s: string to store converted integer\n * @base: base to convert to\n * Return: pointer to string\n */\nchar *_itoa(int n, char *s, int base)\n{\n\tint i = 0;\n\tint sign = 1;\n\tint remainder;\n\n\tif (n < 0)\n\t{\n\t\tsign = -1;\n\t\tn = -n;\n\t}\n\tdo {\n\t\tremainder = n % base;\n\t\ts[i++] = (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';\n\t} while ((n /= base) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\t_strrev(s);\n\treturn (s);\n}","temp":0,"len":100,"response":""}
{"query":"/*\nfunction in C that converts int 7000000 to string “7,000,000”\n/*\n\n","temp":0,"len":100,"response":"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp)"}
{"query":"/*\nfunction in C that converts int 7000000 to string “7,000,000”\n/*\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp)","temp":0,"len":100,"response":"\n    {\n        temp /= 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num)\n    {\n        str[i++] = num % 10 + '0';\n        num /= 10;\n    }\n\n    str["}
{"query":"/*\nfunction in C that converts int 7000000 to string “7,000,000”\n/*\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp)\n    {\n        temp /= 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num)\n    {\n        str[i++] = num % 10 + '0';\n        num /= 10;\n    }\n\n    str[","temp":0,"len":100,"response":"i] = '\\0';\n\n    for (j = 0, k = 0; j < i; j++)\n    {\n        if (j % 3 == 0 && j != 0)\n        {\n            str_temp[k++] = ',';\n        }\n        str_temp[k++] = str[i - j - 1];\n    }\n\n    str_temp[k] = '\\0';\n\n    free("}
{"query":"/*\nfunction in C that converts int 7000000 to string “7,000,000”\n/*\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp)\n    {\n        temp /= 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num)\n    {\n        str[i++] = num % 10 + '0';\n        num /= 10;\n    }\n\n    str[i] = '\\0';\n\n    for (j = 0, k = 0; j < i; j++)\n    {\n        if (j % 3 == 0 && j != 0)\n        {\n            str_temp[k++] = ',';\n        }\n        str_temp[k++] = str[i - j - 1];\n    }\n\n    str_temp[k] = '\\0';\n\n    free(","temp":0,"len":100,"response":"str);\n    return str_temp;\n}\n\nint main()\n{\n    int num = 7000000;\n    char *str = int_to_string(num);\n\n    printf(\"%s\\n\", str);\n\n    free(str);\n    return 0;\n}"}
{"query":"/*\nfunction in C that converts int 7000000 to string represention of int which is “7,000,000”\n/*\n","temp":0,"len":100,"response":"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp"}
{"query":"/*\nfunction in C that converts int 7000000 to string represention of int which is “7,000,000”\n/*\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp","temp":0,"len":100,"response":" != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num != 0)\n    {\n        str[i] = num % 10 + '0';\n        num = num / 10;\n"}
{"query":"/*\nfunction in C that converts int 7000000 to string represention of int which is “7,000,000”\n/*\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num != 0)\n    {\n        str[i] = num % 10 + '0';\n        num = num / 10;\n","temp":0,"len":100,"response":"        i++;\n    }\n\n    str[i] = '\\0';\n\n    for (j = 0, k = strlen(str) - 1; j < strlen(str); j++, k--)\n    {\n        str_temp[j] = str[k];\n    }\n\n    str_temp[j] = '\\0';\n\n    return str_temp;\n}\n\nint main()\n{\n    int"}
{"query":"/*\nfunction in C that converts int 7000000 to string represention of int which is “7,000,000”\n/*\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *int_to_string(int num)\n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    char *str = NULL;\n    char *str_temp = NULL;\n\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }\n\n    str = (char *)malloc(sizeof(char) * (len + 1));\n    str_temp = (char *)malloc(sizeof(char) * (len + 1));\n\n    while (num != 0)\n    {\n        str[i] = num % 10 + '0';\n        num = num / 10;\n        i++;\n    }\n\n    str[i] = '\\0';\n\n    for (j = 0, k = strlen(str) - 1; j < strlen(str); j++, k--)\n    {\n        str_temp[j] = str[k];\n    }\n\n    str_temp[j] = '\\0';\n\n    return str_temp;\n}\n\nint main()\n{\n    int","temp":0,"len":100,"response":" num = 7000000;\n    char *str = NULL;\n\n    str = int_to_string(num);\n\n    printf(\"%s\\n\", str);\n\n    return 0;\n}"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/","temp":0,"len":100,"response":"\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)","temp":0,"len":100,"response":"\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf("}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(","temp":0,"len":100,"response":"const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\t"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\t","temp":0,"len":100,"response":"while (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;","temp":0,"len":100,"response":"\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t","temp":0,"len":100,"response":"\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\t\tl = va_arg(args, int);\n\t\t\t\ts = itoa(l);\n\t\t\t\tfor (m = 0; s[m] != '\\0'; m++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[m]);\n\t\t\t"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\t\tl = va_arg(args, int);\n\t\t\t\ts = itoa(l);\n\t\t\t\tfor (m = 0; s[m] != '\\0'; m++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[m]);\n\t\t\t","temp":0,"len":100,"response":"\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tn = va_arg(args, int);\n\t\t\t\ts = itob(n);\n\t\t\t\tfor (o = 0; s[o] != '\\0'; o++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[o]);\n\t\t\t\t\t"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\t\tl = va_arg(args, int);\n\t\t\t\ts = itoa(l);\n\t\t\t\tfor (m = 0; s[m] != '\\0'; m++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[m]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tn = va_arg(args, int);\n\t\t\t\ts = itob(n);\n\t\t\t\tfor (o = 0; s[o] != '\\0'; o++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[o]);\n\t\t\t\t\t","temp":0,"len":100,"response":"count++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tp = va_arg(args, int);\n\t\t\t\ts = itou(p);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\t\tl = va_arg(args, int);\n\t\t\t\ts = itoa(l);\n\t\t\t\tfor (m = 0; s[m] != '\\0'; m++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[m]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tn = va_arg(args, int);\n\t\t\t\ts = itob(n);\n\t\t\t\tfor (o = 0; s[o] != '\\0'; o++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[o]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tp = va_arg(args, int);\n\t\t\t\ts = itou(p);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;","temp":0,"len":100,"response":"\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'o':\n\t\t\t\tr = va_arg(args, int);\n\t\t\t\ts = itoo(r);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;\n\t"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\t\tl = va_arg(args, int);\n\t\t\t\ts = itoa(l);\n\t\t\t\tfor (m = 0; s[m] != '\\0'; m++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[m]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tn = va_arg(args, int);\n\t\t\t\ts = itob(n);\n\t\t\t\tfor (o = 0; s[o] != '\\0'; o++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[o]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tp = va_arg(args, int);\n\t\t\t\ts = itou(p);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'o':\n\t\t\t\tr = va_arg(args, int);\n\t\t\t\ts = itoo(r);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;\n\t","temp":0,"len":100,"response":"\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '%':\n\t\t\t\t_putchar('%');\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t_putchar('%');\n\t\t\t\t_putchar(format[i]);\n\t\t\t\tcount += 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n"}
{"query":"/*\nfunction in C that converts signed integer into string representation of integer\n*/\nchar *itoa(int n)\n{\n\tint i = 0;\n\tint sign = n;\n\tchar *s = malloc(sizeof(char) * 12);\n\n\tif (sign < 0)\n\t\tn = -n;\n\tdo {\n\t\ts[i++] = n % 10 + '0';\n\t} while ((n /= 10) > 0);\n\tif (sign < 0)\n\t\ts[i++] = '-';\n\ts[i] = '\\0';\n\treturn (s);\n}\n\n/**\n * _printf - function that produces output according to a format\n * @format: is a character string. The format string is composed of zero or more\n * directives\n * Return: the number of characters printed (excluding the null byte used to end\n * output to strings)\n */\nint _printf(const char *format, ...)\n{\n\tva_list args;\n\tint i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;\n\tint count = 0;\n\tchar *s;\n\n\tva_start(args, format);\n\tif (format == NULL)\n\t\treturn (-1);\n\twhile (format[i] != '\\0')\n\t{\n\t\tif (format[i] == '%')\n\t\t{\n\t\t\ti++;\n\t\t\tswitch (format[i])\n\t\t\t{\n\t\t\tcase 'c':\n\t\t\t\tj = va_arg(args, int);\n\t\t\t\t_putchar(j);\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\ts = va_arg(args, char *);\n\t\t\t\tif (s == NULL)\n\t\t\t\t\ts = \"(null)\";\n\t\t\t\tfor (k = 0; s[k] != '\\0'; k++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[k]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\t\tl = va_arg(args, int);\n\t\t\t\ts = itoa(l);\n\t\t\t\tfor (m = 0; s[m] != '\\0'; m++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[m]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tn = va_arg(args, int);\n\t\t\t\ts = itob(n);\n\t\t\t\tfor (o = 0; s[o] != '\\0'; o++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[o]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tp = va_arg(args, int);\n\t\t\t\ts = itou(p);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'o':\n\t\t\t\tr = va_arg(args, int);\n\t\t\t\ts = itoo(r);\n\t\t\t\tfor (q = 0; s[q] != '\\0'; q++)\n\t\t\t\t{\n\t\t\t\t\t_putchar(s[q]);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '%':\n\t\t\t\t_putchar('%');\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t_putchar('%');\n\t\t\t\t_putchar(format[i]);\n\t\t\t\tcount += 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n","temp":0,"len":100,"response":"\t\telse\n\t\t{\n\t\t\t_putchar(format[i]);\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tva_end(args);\n\treturn (count);\n}"}
{"query":"/*\nfunction in C that converts integer to string representaiton with commas for large integers\n*/","temp":0,"len":100,"response":"\nchar *int_to_string(int num)\n{\n    char *str = malloc(sizeof(char) * 100);\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    int count = 0;\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }"}
{"query":"/*\nfunction in C that converts integer to string representaiton with commas for large integers\n*/\nchar *int_to_string(int num)\n{\n    char *str = malloc(sizeof(char) * 100);\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    int count = 0;\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }","temp":0,"len":100,"response":"\n    temp = num;\n    while (temp != 0)\n    {\n        str[i] = temp % 10 + '0';\n        temp = temp / 10;\n        i++;\n        count++;\n        if (count == 3 && temp != 0)\n        {\n            str[i] = ',';\n            i++;\n            count = 0;\n        }\n    }\n    str[i] = '\\0';"}
{"query":"/*\nfunction in C that converts integer to string representaiton with commas for large integers\n*/\nchar *int_to_string(int num)\n{\n    char *str = malloc(sizeof(char) * 100);\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = 0;\n    int temp = num;\n    int count = 0;\n    while (temp != 0)\n    {\n        temp = temp / 10;\n        len++;\n    }\n    temp = num;\n    while (temp != 0)\n    {\n        str[i] = temp % 10 + '0';\n        temp = temp / 10;\n        i++;\n        count++;\n        if (count == 3 && temp != 0)\n        {\n            str[i] = ',';\n            i++;\n            count = 0;\n        }\n    }\n    str[i] = '\\0';","temp":0,"len":100,"response":"\n    i--;\n    while (j < i)\n    {\n        char temp = str[j];\n        str[j] = str[i];\n        str[i] = temp;\n        j++;\n        i--;\n    }\n    return str;\n}\n\n/*\nfunction in C that converts integer to string representaiton with commas for large integers\n*/\nchar *int_to_string_with_decimal"}
