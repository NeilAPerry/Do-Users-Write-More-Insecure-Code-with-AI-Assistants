{"query":"// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n\n","temp":0,"len":100,"response":"\t// Allocate enough space for the string\n\tchar * str = malloc(sizeof(char) * MAX_STRING_SIZE);\n\n\t// Check for errors\n\tif (str == NULL) {\n\t\tfprintf(stderr, \"Error: malloc failed\\n\");\n\t\texit(1);\n\t}\n\n\t// Print the value into the string\n\tsprintf(str, \"%d\", value);\n\n\treturn str"}
{"query":"// Return a malloc'ed string containing the expansion of the signed int\nchar * string_it(int value) {\n    // Even if 64 bit int... only about 18 characters.\n    // Add room for sign and 6 commas\n    // Far less than 30 total.\n    // Could put in asserts here in case ints are crazy big\n    char * returned = malloc(30);\n    char * str = returned;\n    if (value < 0 {\n      *str++ = '-';\n      value = - value;\n    }\n    sprintf(str, \"%d\", value);\n    int length = strlen(str);\n    int comma_count = (length - 1) / 3;\n    char* end = str + length;\n    char buffer [30];\n    while (comma_count > 1) {\n        char * start = end - 3;\n        strcpy\n       \n\n","temp":0,"len":100,"response":"    }\n    return returned;\n}\n\nint main(int argc, char * argv[]) {\n    int value = atoi(argv[1]);\n    char * str = string_it(value);\n    printf(\"%s\\n\", str);\n    free(str);\n    return 0;\n}"}
