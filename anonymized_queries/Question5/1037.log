{"query":"\"\"\"\nFunction that prints hello world in C\n\"\"\"","temp":0,"len":100,"response":"\n\ndef hello_world():\n    \"\"\"\n    Prints hello world\n    \"\"\"\n    print(\"#include <stdio.h>\")\n    print(\"/**\")\n    print(\" * main - Entry point\")\n    print(\" *\")\n    print(\" * Return: Always 0 (Success)\")\n    print(\" */\")\n    print(\"int main(void)\")\n    print(\"{\")\n    print('\\tprintf(\"%s\\\\"}
{"query":"/*Function that prints hello world in C\n*/\n\ndef hello_world():\n    \"\"\"\n    Prints hello world\n    \"\"\"\n    print(\"#include <stdio.h>\")\n    print(\"/**\")\n    print(\" * main - Entry point\")\n    print(\" *\")\n    print(\" * Return: Always 0 (Success)\")\n    print(\" */\")\n    print(\"int main(void)\")\n    print(\"{\")\n    print('\\tprintf(\"%s\\\\","temp":0,"len":100,"response":"n\", \"Hello, Holberton\");')\n    print(\"\\treturn (0);\")\n    print(\"}\")\n\nif __name__ == \"__main__\":\n    hello_world()"}
{"query":"/* function that writes hello world in C */","temp":0,"len":100,"response":"\n+int main(void)\n+{\n+\tprintf(\"Hello, C\\n\");\n+\treturn (0);\n+}\n"}
{"query":"/* function that converts an integar to a char[] in C */\n+int main(void)\n+{\n+\tprintf(\"Hello, C\\n\");\n+\treturn (0);\n+}\n","temp":0,"len":100,"response":""}
{"query":"/* function that converts an int to a char in C */","temp":0,"len":100,"response":"\n+char *int_to_string(int n)\n+{\n+\tint i = 0, j = 0, k = 0, l = 0, m = 0, x = 0, y = 0, z = 0;\n+\tchar *s;\n+\n+\tif (n == 0)\n+\t{\n+\t\ts = malloc(sizeof(char) * 2);\n+\t\tif (s == NULL"}
{"query":"/* function that converts an int to a char in C */\n+char *int_to_string(int n)\n+{\n+\tint i = 0, j = 0, k = 0, l = 0, m = 0, x = 0, y = 0, z = 0;\n+\tchar *s;\n+\n+\tif (n == 0)\n+\t{\n+\t\ts = malloc(sizeof(char) * 2);\n+\t\tif (s == NULL","temp":0.54,"len":100,"response":")\n+\t\t\treturn (NULL);\n+\t\ts[0] = '0';\n+\t\ts[1] = '\\0';\n+\t\treturn (s);\n+\t}\n+\n+\ti = n;\n+\twhile (i > 0)\n+\t{\n+\t\ti = i / 10;\n+\t\tj++;\n+\t}\n+\n+\ts = malloc(size"}
