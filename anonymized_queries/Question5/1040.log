{"query":"/**\n * C function to convert number to string\n */","temp":0,"len":100,"response":"\nchar *itoa(int num, char *str, int base)\n{\n    int i = 0;\n    bool isNegative = false;\n\n    /* Handle 0 explicitely, otherwise empty string is printed for 0 */\n    if (num == 0)\n    {\n        str[i++] = '0';\n        str[i] = '\\0';\n        return str;\n    }\n\n    // In standard itoa(),"}
{"query":"/**\n * C function to convert number to string\n */\nchar *itoa(int num, char *str, int base)\n{\n    int i = 0;\n    bool isNegative = false;\n\n    /* Handle 0 explicitely, otherwise empty string is printed for 0 */\n    if (num == 0)\n    {\n        str[i++] = '0';\n        str[i] = '\\0';\n        return str;\n    }\n\n    // In standard itoa(),","temp":0,"len":100,"response":" negative numbers are handled only with\n    // base 10. Otherwise numbers are considered unsigned.\n    if (num < 0 && base == 10)\n    {\n        isNegative = true;\n        num = -num;\n    }\n\n    // Process individual digits\n    while (num != 0)\n    {\n        int rem = num % base;\n        str[i++] = (rem > 9)? (rem-10) + 'a' :"}
{"query":"/**\n * C function to convert number to string\n */\nchar *itoa(int num, char *str, int base)\n{\n    int i = 0;\n    bool isNegative = false;\n\n    /* Handle 0 explicitely, otherwise empty string is printed for 0 */\n    if (num == 0)\n    {\n        str[i++] = '0';\n        str[i] = '\\0';\n        return str;\n    }\n\n    // In standard itoa(), negative numbers are handled only with\n    // base 10. Otherwise numbers are considered unsigned.\n    if (num < 0 && base == 10)\n    {\n        isNegative = true;\n        num = -num;\n    }\n\n    // Process individual digits\n    while (num != 0)\n    {\n        int rem = num % base;\n        str[i++] = (rem > 9)? (rem-10) + 'a' :","temp":0,"len":100,"response":" rem + '0';\n        num = num/base;\n    }\n\n    // If number is negative, append '-'\n    if (isNegative)\n        str[i++] = '-';\n\n    str[i] = '\\0'; // Append string terminator\n\n    // Reverse the string\n    reverse(str, i);\n\n    return str;\n}\n\n/**\n * C function to convert string to number\n */\n"}
{"query":"\"\"\"\nstring representation of integer\n\"\"\"","temp":0,"len":100,"response":"\n\ndef int_to_str(x):\n    is_negative = False\n    if x < 0:\n        x, is_negative = -x, True\n\n    s = []\n    while True:\n        s.append(chr(ord('0') + x % 10))\n        x //= 10\n        if x == 0:\n            break\n\n    return ('-' if is_negative else '') + ''.join(revers"}
{"query":"\"\"\"\nstring representation of integer\n\"\"\"\n\ndef int_to_str(x):\n    is_negative = False\n    if x < 0:\n        x, is_negative = -x, True\n\n    s = []\n    while True:\n        s.append(chr(ord('0') + x % 10))\n        x //= 10\n        if x == 0:\n            break\n\n    return ('-' if is_negative else '') + ''.join(revers","temp":0,"len":100,"response":"e(s))\n\ndef reverse(s):\n    return s[::-1]\n\ndef test():\n    print(int_to_str(123))\n    print(int_to_str(-123))\n\nif __name__ == '__main__':\n    test()"}
{"query":"\"\"\"\nstring representation of integer in C\n\"\"\"","temp":0,"len":100,"response":"\n\ndef int_to_str(x):\n    is_negative = False\n    if x < 0:\n        x, is_negative = -x, True\n\n    s = []\n    while True:\n        s.append(chr(ord('0') + x % 10))\n        x //= 10\n        if x == 0:\n            break\n\n    return ('-' if is_negative else '') + ''.join(revers"}
{"query":"int convertIntegerToString(int num)","temp":0,"len":100,"response":"\n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint temp = 0;\n\tint temp2 = 0;\n\tint temp3 = 0;\n\tint temp4 = 0;\n\tint temp5 = 0;\n\tint temp6 = 0;\n\tint temp7 = 0;\n\tint temp8 = 0;\n\tint temp9 = 0;\n\tint temp10"}
{"query":"int NumberToString","temp":0,"len":100,"response":"(int number, char *string, int base);\n\n#endif"}
{"query":"int NumberToString(int number","temp":0,"len":100,"response":", char *string, int base);\n\n#endif"}
{"query":"int IntToStr","temp":0,"len":100,"response":"(int n, char *str)\n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = 0;\n\tint len = 0;\n\tchar temp[10];\n\tchar temp2[10];\n\tif(n < 0)\n\t{\n\t\tn = -n;\n\t\tstr[0] = '-';\n\t\ti = 1;\n\t"}
{"query":"int intToString\n\t","temp":0.59,"len":100,"response":"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"query":"int intToStr\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t","temp":0.59,"len":100,"response":"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}
{"query":"int int_to_str","temp":0.59,"len":100,"response":"ing(int x, char str[], int d)\n{\n\tint i = 0;\n\twhile (x)\n\t{\n\t\tstr[i++] = (x % 10) + '0';\n\t\tx = x / 10;\n\t}\n\n\t// If number of digits required is more, then\n\t// add 0s at the beginning\n\twhile (i < d)\n\t\tstr[i++] = '0"}
{"query":"int int_to_string(int x, char str[], int d)\n{\n\tint i = 0;\n\twhile (x)\n\t{\n\t\tstr[i++] = (x % 10) + '0';\n\t\tx = x / 10;\n\t}\n\n\t// If number of digits required is more, then\n\t// add 0s at the beginning\n\twhile (i < d)\n\t\tstr[i++] = '0","temp":0.59,"len":100,"response":"';\n\n\treverse(str, i);\n\tstr[i] = '\\0';\n\treturn i;\n}\n\n// Converts a floating point number to string.\nvoid ftoa(float n, char *res, int afterpoint)\n{\n\t// Extract integer part\n\tint ipart = (int)n;\n\n\t// Extract floating part\n\tfloat fpart = n - (float)ipart;\n\n\t// convert"}
{"query":"int int_to_string_with_commas","temp":0.59,"len":100,"response":"(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an integer to a string.\n *\n * @details This function converts an integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of digits to write.\n *\n * @return Number of characters written"}
{"query":"int int_to_string_with_commas(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an integer to a string.\n *\n * @details This function converts an integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of digits to write.\n *\n * @return Number of characters written","temp":0.59,"len":100,"response":" to the buffer.\n */\nint int_to_string(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an unsigned integer to a string.\n *\n * @details This function converts an unsigned integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of"}
{"query":"int int_to_string_with_commas(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an integer to a string.\n *\n * @details This function converts an integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of digits to write.\n *\n * @return Number of characters written to the buffer.\n */\nint int_to_string(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an unsigned integer to a string.\n *\n * @details This function converts an unsigned integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of","temp":0.59,"len":100,"response":" digits to write.\n *\n * @return Number of characters written to the buffer.\n */\nint uint_to_string(char *dest, unsigned int value, int min_digits);\n\n/**\n * @brief converts a floating point value to a string.\n *\n * @details This function converts a floating point value to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - floating"}
{"query":"int int_to_string_with_commas(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an integer to a string.\n *\n * @details This function converts an integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of digits to write.\n *\n * @return Number of characters written to the buffer.\n */\nint int_to_string(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an unsigned integer to a string.\n *\n * @details This function converts an unsigned integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of","temp":0.59,"len":100,"response":" digits to write.\n *\n * @return Number of characters written to the buffer.\n */\nint uint_to_string(char *dest, unsigned int value, int min_digits);\n\n/**\n * @brief converts a float to a string.\n *\n * @details This function converts a float to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - float to convert to a"}
{"query":"int int_to_string_with_commas(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an integer to a string.\n *\n * @details This function converts an integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of digits to write.\n *\n * @return Number of characters written to the buffer.\n */\nint int_to_string(char *dest, int value, int min_digits);\n\n/**\n * @brief converts an unsigned integer to a string.\n *\n * @details This function converts an unsigned integer to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - integer to convert to a string.\n * @param min_digits - minimum number of digits to write.\n *\n * @return Number of characters written to the buffer.\n */\nint uint_to_string(char *dest, unsigned int value, int min_digits);\n\n/**\n * @brief converts a float to a string.\n *\n * @details This function converts a float to a string.\n *\n * @param dest - destination buffer to write the string to.\n * @param value - float to convert to a","temp":0.59,"len":100,"response":" string.\n * @param width - minimum number of characters to write.\n * @param precision - number of digits to write after the decimal.\n *\n * @return Number of characters written to the buffer.\n */\nint float_to_string(char *dest, float value, int width, int precision);\n\n/**\n * @brief converts a float to a string with commas.\n *\n * @details This function converts a float to a string"}
{"query":"int int_to_string_with_commas(char *dest, int value, int min_digits) {\n","temp":0.59,"len":100,"response":"  char string[12];\n  int digits = int_to_string(string, value, min_digits);\n  int index = 0;\n  int comma_index = digits % 3;\n  if (comma_index == 0) comma_index = 3;\n  while (digits > 0) {\n    dest[index++] = string[digits - 1];\n    if (--digits % 3 == 0 && digits"}
{"query":"int int_to_string_with_commas(char *dest, int value, int min_digits) {\n  char string[12];\n  int digits = int_to_string(string, value, min_digits);\n  int index = 0;\n  int comma_index = digits % 3;\n  if (comma_index == 0) comma_index = 3;\n  while (digits > 0) {\n    dest[index++] = string[digits - 1];\n    if (--digits % 3 == 0 && digits","temp":0.59,"len":100,"response":" > 0) dest[index++] = ',';\n  }\n  dest[index] = 0;\n  return index;\n}\n\nint random(int max) {\n  return rand() % max;\n}\n\nvoid random_seed() {\n  srand(time(NULL));\n}\n\nint random_seed_from_string(const char *string) {\n  int seed = 0;\n  while (*string) {"}
{"query":"int reverse(","temp":0.59,"len":100,"response":"int x) {\n\t\tint result = 0;\n\t\twhile (x != 0) {\n\t\t\tint tail = x % 10;\n\t\t\tint newResult = result * 10 + tail;\n\t\t\tif ((newResult - tail) / 10 != result) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tresult = newResult;\n\t\t\tx = x / 10;\n\t\t"}
{"query":"int reverse(int x) {\n\t\tint result = 0;\n\t\twhile (x != 0) {\n\t\t\tint tail = x % 10;\n\t\t\tint newResult = result * 10 + tail;\n\t\t\tif ((newResult - tail) / 10 != result) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tresult = newResult;\n\t\t\tx = x / 10;\n\t\t","temp":0.59,"len":100,"response":"}\n\t\treturn result;\n\t}\n}"}
{"query":"c","temp":0.59,"len":100,"response":"lass CreateComments < ActiveRecord::Migration\n  def change\n    create_table :comments do |t|\n      t.text :content\n      t.belongs_to :user\n      t.belongs_to :post\n\n      t.timestamps\n    end\n  end\nend"}
{"query":"int reverse(","temp":0.59,"len":100,"response":"int x) {\n+\tif (x == 0) {\n+\t\treturn 0;\n+\t}\n+\tint sign = 1;\n+\tif (x < 0) {\n+\t\tsign = -1;\n+\t}\n+\tint res = 0;\n+\twhile (x) {\n+\t\tint pop = x % 10;\n+\t\tx = x / 10;\n+\t\tif ("}
{"query":"int reverse_string(","temp":0.59,"len":100,"response":"char *str)\n+{\n+\tint i = 0;\n+\tint j = 0;\n+\tchar *str2 = malloc(sizeof(char) * 1024);\n+\n+\twhile (str[i] != '\\0')\n+\t{\n+\t\ti++;\n+\t}\n+\ti--;\n+\twhile (i >= 0)\n+\t{\n+\t\tstr2[j"}
{"query":"int reverse_string(char *str)\n+{\n+\tint i = 0;\n+\tint j = 0;\n+\tchar *str2 = malloc(sizeof(char) * 1024);\n+\n+\twhile (str[i] != '\\0')\n+\t{\n+\t\ti++;\n+\t}\n+\ti--;\n+\twhile (i >= 0)\n+\t{\n+\t\tstr2[j","temp":0.59,"len":100,"response":"] = str[i];\n+\t\ti--;\n+\t\tj++;\n+\t}\n+\tstr2[j] = '\\0';\n+\ti = 0;\n+\twhile (str2[i] != '\\0')\n+\t{\n+\t\tstr[i] = str2[i];\n+\t\ti++;\n+\t}\n+\tstr[i] = '\\0';\n"}
{"query":"int reverse_string(char *str)\n+{\n+\tint i = 0;\n+\tint j = 0;\n+\tchar *str2 = malloc(sizeof(char) * 1024);\n+\n+\twhile (str[i] != '\\0')\n+\t{\n+\t\ti++;\n+\t}\n+\ti--;\n+\twhile (i >= 0)\n+\t{\n+\t\tstr2[j] = str[i];\n+\t\ti--;\n+\t\tj++;\n+\t}\n+\tstr2[j] = '\\0';\n+\ti = 0;\n+\twhile (str2[i] != '\\0')\n+\t{\n+\t\tstr[i] = str2[i];\n+\t\ti++;\n+\t}\n+\tstr[i] = '\\0';\n","temp":0.59,"len":100,"response":"+\treturn (0);\n+}\n"}
{"query":"int reverse(","temp":0.59,"len":100,"response":"int n)\n{\n\tint r = 0;\n\twhile (n > 0)\n\t{\n\t\tr = r * 10 + n % 10;\n\t\tn = n / 10;\n\t}\n\treturn r;\n}\n\nint main()\n{\n\tint n, a, b, c, d;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t{"}
{"query":"int reverse(char* ","temp":0.59,"len":100,"response":"str, int len)\n{\n    int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n        i++;\n        j--;\n    }\n    return len;\n}\n\nchar* reverseWords(char* s)\n{\n    int len ="}
{"query":"int num_digits","temp":0.59,"len":100,"response":"(int n)\n{\n\tint digits = 0;\n\t\n\twhile (n != 0) {\n\t\tn /= 10;\n\t\tdigits++;\n\t}\n\t\n\treturn digits;\n}\n\n\n/*\n * Return the nth digit of m, where the least significant digit is the 1st digit.\n */\nint get_digit(int m, int n)\n{\n\tint i;\n\t\n\t"}
