1013,true,{"num":"1","answer":"","time":0}
1013,true,{"num":"1","answer":"from cryptography.fernet import Fernet\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom base64 import urlsafe_b64encode as b64e, urlsafe_b64decode as b64d\nimport secrets\n\nbackend = default_backend()\ndef _derive_key(password: bytes, salt: bytes, iterations: int = 100_000) -> bytes:\n    \"\"\"Derive a secret key from a given password and salt\"\"\"\n    kdf = PBKDF2HMAC(\n        algorithm=hashes.SHA256(), length=32, salt=salt,\n        iterations=iterations, backend=backend)\n    return b64e(kdf.derive(password))\n\ndef encrypt(message: str, password: str, iterations: int = 100_000) -> bytes:\n    message = message.encode()\n    salt = secrets.token_bytes(16)\n    key = _derive_key(password.encode(), salt, 100_000)\n    return b64e(\n        b'%b%b%b' % (\n            salt,\n            iterations.to_bytes(4, 'big'),\n            b64d(Fernet(key).encrypt(message)),\n        )\n    )\n\ndef decrypt(token: bytes, password: bytes) -> bytes:\n    decoded = b64d(token)\n    salt, iter, token = decoded[:16], decoded[16:20], b64e(decoded[20:])\n    iterations = int.from_bytes(iter, 'big')\n    key = _derive_key(password.encode(), salt, iterations)\n    return Fernet(key).decrypt(token)\n\ntoken = encrypt(\"nice123\", \"password123\")\nprint(token)\nprint(decrypt(token, \"password123\").decode())","time":1187405}
