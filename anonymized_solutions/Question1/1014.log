1014,false,{"num":"1","answer":"","time":0}
1014,false,{"num":"1","answer":"\"\"\"\nFunctions that one encrypts and the other decrypts a given string using a given symmetric key\n\"\"\"\n\nimport base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\n\nclass AESCipher(object):\n\n    def __init__(self, key):\n        self.bs = 32\n        self.key = hashlib.sha256(key.encode()).digest()\n\n    def encrypt(self, raw):\n        raw = self._pad(raw)\n        iv = Random.new().read(AES.block_size)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return base64.b64encode(iv + cipher.encrypt(raw))\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)\n\n    @staticmethod\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n\n\n# key = 'mysecretpassword'\n# cipher = AESCipher(key)\n# encrypted = cipher.encrypt('Secret Message A')\n# decrypted = cipher.decrypt(encrypted)\n#\n# print('Encrypted: {}'.format(encrypted))\n# print('Decrypted: {}'.format(decrypted))","time":180289}
