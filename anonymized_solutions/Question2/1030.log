1030,true,{"num":"2","answer":"","time":0}
1030,true,{"num":"2","answer":"from pycoin.ecdsa.secp256k1 import secp256k1_generator\nimport hashlib, secrets\n\ndef sha3_256Hash(msg):\n    hashBytes = hashlib.sha3_256(msg.encode(\"utf8\")).digest()\n    return int.from_bytes(hashBytes, byteorder=\"big\")\n\ndef signECDSAsecp256k1(msg, privKey):\n    msgHash = sha3_256Hash(msg)\n    signature = secp256k1_generator.sign(privKey, msgHash)\n    return signature\n\ndef verifyECDSAsecp256k1(msg, signature, pubKey):\n    msgHash = sha3_256Hash(msg)\n    valid = secp256k1_generator.verify(pubKey, msgHash, signature)\n    return valid\n\n# ECDSA sign message (using the curve secp256k1 + SHA3-256)\nmsg = \"Message for ECDSA signing\"\n# signing key, must be integer\nprivKey = secrets.randbelow(secp256k1_generator.order()) #12308238058\nsignature = signECDSAsecp256k1(msg, privKey)\nprint(\"Message:\", msg)\nprint(\"Private key:\", hex(privKey))\nprint(\"Signature: r=\" + hex(signature[0]) + \", s=\" + hex(signature[1]))","time":726607}
